// Copyright 2025 snaart
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package phantomcore

import (
	"context"
	"crypto/rand"
	"encoding/binary"
	"fmt"
	"io"
	pb "phantom/proto"
	"strings"
	"sync"
	"time"

	"github.com/ipfs/go-cid"
	"github.com/libp2p/go-libp2p"
	dht "github.com/libp2p/go-libp2p-kad-dht"
	"github.com/libp2p/go-libp2p/core/crypto"
	"github.com/libp2p/go-libp2p/core/host"
	"github.com/libp2p/go-libp2p/core/network"
	"github.com/libp2p/go-libp2p/core/peer"
	"github.com/libp2p/go-libp2p/core/protocol"
	"github.com/libp2p/go-libp2p/p2p/discovery/mdns"
	rcmgr "github.com/libp2p/go-libp2p/p2p/host/resource-manager"
	"github.com/libp2p/go-libp2p/p2p/net/connmgr"
	"github.com/multiformats/go-multiaddr"
	"github.com/multiformats/go-multihash"
	"google.golang.org/protobuf/proto"
)

const (
	ProtocolID         = "/phantom/1.0.0"
	DiscoveryNamespace = "phantom-network"
	StreamTimeout      = 30 * time.Second
	DiscoveryInterval  = 15 * time.Second
	MaxP2PMessageSize  = 10 * 1024 * 1024 // 10MB
)

// P2PTransport —É–ø—Ä–∞–≤–ª—è–µ—Ç P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ libp2p
type P2PTransport struct {
	host           host.Host
	dht            *dht.IpfsDHT
	ctx            context.Context
	cancel         context.CancelFunc
	handler        CoreEventHandler
	myUsernameHash string
	peers          map[string]*P2PeerInfo
	peersMu        sync.RWMutex
	messageHandler P2PMessageHandler
	discovery      *mdnsDiscovery
	isRunning      bool
	mu             sync.RWMutex
	core           interface {
		getP2PHashesForAnnouncement() []string
	}
}

// P2PeerInfo —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ P2P –ø–∏—Ä–µ
type P2PeerInfo struct {
	PeerID       peer.ID
	UsernameHash string
	LastSeen     time.Time
	IsLocal      bool
	Addresses    []multiaddr.Multiaddr
	Stream       network.Stream
	StreamMu     sync.Mutex
}

// P2PMessageHandler –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ P2P —Å–æ–æ–±—â–µ–Ω–∏–π
type P2PMessageHandler interface {
	HandleP2PMessage(packet *pb.Packet) error
	GetUsernameHash() string
}

// NewP2PTransport —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π P2P —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
func NewP2PTransport(handler CoreEventHandler) (*P2PTransport, error) {
	ctx, cancel := context.WithCancel(context.Background())
	return &P2PTransport{
		ctx:     ctx,
		cancel:  cancel,
		handler: handler,
		peers:   make(map[string]*P2PeerInfo),
	}, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç P2P —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
func (t *P2PTransport) Start(usernameHash string) error {
	t.mu.Lock()
	defer t.mu.Unlock()

	if t.isRunning {
		return fmt.Errorf("P2P —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
	}

	t.myUsernameHash = usernameHash
	t.handler.OnLog(LogLevelInfo, "üåê –ó–∞–ø—É—Å–∫ P2P —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞...")

	priv, _, err := crypto.GenerateEd25519Key(rand.Reader)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á —Ö–æ—Å—Ç–∞: %w", err)
	}

	cm, err := connmgr.NewConnManager(100, 400, connmgr.WithGracePeriod(time.Minute))
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å connection manager: %w", err)
	}

	limiter := rcmgr.NewFixedLimiter(rcmgr.InfiniteLimits)
	rm, err := rcmgr.NewResourceManager(limiter)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤: %w", err)
	}

	staticRelays := addrInfosFromAddrs(CustomBootstrapPeers)
	if len(staticRelays) == 0 {
		return fmt.Errorf("—Å–ø–∏—Å–æ–∫ bootstrap-—É–∑–ª–æ–≤ –ø—É—Å—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ p2p_bootstrap.go")
	}

	opts := []libp2p.Option{
		libp2p.Identity(priv),
		libp2p.ListenAddrStrings(
			"/ip4/0.0.0.0/tcp/0",
			"/ip6/::/tcp/0",
			"/ip4/0.0.0.0/udp/0/quic-v1",
			"/ip6/::/udp/0/quic-v1",
		),
		libp2p.ResourceManager(rm),
		libp2p.ConnectionManager(cm),
		libp2p.EnableHolePunching(),
		libp2p.EnableRelay(),
		libp2p.DefaultSecurity,
		libp2p.ForceReachabilityPrivate(),
		libp2p.EnableAutoRelayWithStaticRelays(staticRelays),
	}

	host, err := libp2p.New(opts...)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å libp2p —Ö–æ—Å—Ç: %w", err)
	}
	t.host = host

	t.handler.OnLog(LogLevelInfo, fmt.Sprintf("‚úÖ P2P —Ö–æ—Å—Ç —Å–æ–∑–¥–∞–Ω. PeerID: %s", host.ID().String()))
	for _, addr := range host.Addrs() {
		t.handler.OnLog(LogLevelInfo, fmt.Sprintf("üìç Listening on: %s/p2p/%s", addr, host.ID()))
	}

	kadDHT, err := dht.New(t.ctx, host, dht.Mode(dht.ModeAutoServer))
	if err != nil {
		host.Close()
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å DHT: %w", err)
	}
	t.dht = kadDHT

	if err := kadDHT.Bootstrap(t.ctx); err != nil {
		host.Close()
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å bootstrap DHT: %w", err)
	}

	for _, pi := range staticRelays {
		go func(pi peer.AddrInfo) {
			if err := host.Connect(t.ctx, pi); err == nil {
				t.handler.OnLog(LogLevelInfo, fmt.Sprintf("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ bootstrap —É–∑–ª—É: %s", pi.ID))
			} else {
				t.handler.OnLog(LogLevelWarning, fmt.Sprintf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ bootstrap —É–∑–ª—É %s: %v", pi.ID, err))
			}
		}(pi)
	}

	host.SetStreamHandler(protocol.ID(ProtocolID), t.handleStream)

	mdnsService := mdns.NewMdnsService(host, DiscoveryNamespace, t)
	if err := mdnsService.Start(); err != nil {
		t.handler.OnLog(LogLevelWarning, fmt.Sprintf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å mDNS: %v", err))
	} else {
		t.discovery = &mdnsDiscovery{service: mdnsService}
		t.handler.OnLog(LogLevelInfo, "‚úÖ mDNS discovery –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏")
	}

	go t.discoveryLoop()
	go t.maintainPeers()

	t.isRunning = true
	t.handler.OnLog(LogLevelInfo, "üöÄ P2P —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç P2P —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
func (t *P2PTransport) Stop() {
	t.mu.Lock()
	defer t.mu.Unlock()

	if !t.isRunning {
		return
	}
	t.handler.OnLog(LogLevelInfo, "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ P2P —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞...")

	t.peersMu.Lock()
	for _, peer := range t.peers {
		if peer.Stream != nil {
			peer.Stream.Close()
		}
	}
	t.peers = make(map[string]*P2PeerInfo)
	t.peersMu.Unlock()

	if t.discovery != nil {
		t.discovery.service.Close()
	}

	if t.dht != nil {
		t.dht.Close()
	}

	if t.host != nil {
		t.host.Close()
	}

	t.cancel()
	t.isRunning = false
	t.handler.OnLog(LogLevelInfo, "‚úÖ P2P —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}

// SendPacket –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞–∫–µ—Ç —á–µ—Ä–µ–∑ P2P
func (t *P2PTransport) SendPacket(destHash string, packet *pb.Packet) error {
	t.mu.RLock()
	if !t.isRunning {
		t.mu.RUnlock()
		return fmt.Errorf("P2P —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
	}
	t.mu.RUnlock()

	peerInfo := t.getPeer(destHash)
	if peerInfo == nil {
		t.handler.OnLog(LogLevelInfo, fmt.Sprintf("üîé –ü–∏—Ä %s –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ, –∏—â–µ–º –≤ DHT...", truncateHash(destHash)))
		if err := t.findPeerInDHT(destHash); err != nil {
			return fmt.Errorf("–ø–∏—Ä %s –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ P2P —Å–µ—Ç–∏: %w", truncateHash(destHash), err)
		}
		time.Sleep(2 * time.Second) // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
		peerInfo = t.getPeer(destHash)
		if peerInfo == nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø–∏—Ä–æ–º %s", truncateHash(destHash))
		}
	}
	return t.sendToPeer(peerInfo, packet)
}

// IsP2PAvailable –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –ø–∏—Ä —á–µ—Ä–µ–∑ P2P
func (t *P2PTransport) IsP2PAvailable(peerHash string) bool {
	t.mu.RLock()
	if !t.isRunning {
		t.mu.RUnlock()
		return false
	}
	t.mu.RUnlock()
	peerInfo := t.getPeer(peerHash)
	return peerInfo != nil && peerInfo.PeerID != "" && time.Since(peerInfo.LastSeen) < 5*time.Minute
}

// GetP2PPeers –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö P2P –ø–∏—Ä–æ–≤
func (t *P2PTransport) GetP2PPeers() []string {
	t.peersMu.RLock()
	defer t.peersMu.RUnlock()
	var peers []string
	for hash, info := range t.peers {
		if t.IsP2PAvailable(hash) {
			location := "–≥–ª–æ–±–∞–ª—å–Ω–∞—è —Å–µ—Ç—å"
			if info.IsLocal {
				location = "–ª–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å"
			}
			peers = append(peers, fmt.Sprintf("%s (%s)", truncateHash(hash), location))
		}
	}
	return peers
}

// SetMessageHandler —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
func (t *P2PTransport) SetMessageHandler(handler P2PMessageHandler) {
	t.messageHandler = handler
}

// SetCore —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ Core –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ö—ç—à–µ–π –¥–ª—è –∞–Ω–æ–Ω—Å–∞
func (t *P2PTransport) SetCore(core interface {
	getP2PHashesForAnnouncement() []string
}) {
	t.core = core
}

// handleStream –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π –ø–æ—Ç–æ–∫
func (t *P2PTransport) handleStream(stream network.Stream) {
	defer stream.Close()

	var length uint32
	if err := binary.Read(stream, binary.BigEndian, &length); err != nil {
		if err != io.EOF {
			t.handler.OnLog(LogLevelWarning, fmt.Sprintf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–ª–∏–Ω—É P2P —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err))
		}
		return
	}

	if length > MaxP2PMessageSize {
		t.handler.OnLog(LogLevelError, fmt.Sprintf("‚ùå –ü–æ–ª—É—á–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ P2P —Å–æ–æ–±—â–µ–Ω–∏–µ (%d –±–∞–π—Ç), —Ä–∞–∑—Ä—ã–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.", length))
		stream.Reset()
		return
	}

	buffer := make([]byte, length)
	if _, err := io.ReadFull(stream, buffer); err != nil {
		t.handler.OnLog(LogLevelError, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–ª–∞ P2P —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err))
		return
	}

	var packet pb.Packet
	if err := proto.Unmarshal(buffer, &packet); err != nil {
		t.handler.OnLog(LogLevelError, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Protobuf –ø–∞–∫–µ—Ç–∞: %v", err))
		return
	}

	t.updatePeerInfo(packet.SourceClientIdHash, stream.Conn().RemotePeer(), stream.Conn().RemoteMultiaddr())

	if t.messageHandler != nil {
		if err := t.messageHandler.HandleP2PMessage(&packet); err != nil {
			t.handler.OnLog(LogLevelError, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ P2P –ø–∞–∫–µ—Ç–∞: %v", err))
		}
	}
}

// sendToPeer –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–∏—Ä—É
func (t *P2PTransport) sendToPeer(peerInfo *P2PeerInfo, packet *pb.Packet) error {
	peerInfo.StreamMu.Lock()
	defer peerInfo.StreamMu.Unlock()

	if peerInfo.Stream == nil || peerInfo.Stream.Conn().IsClosed() {
		ctx, cancel := context.WithTimeout(t.ctx, StreamTimeout)
		defer cancel()
		stream, err := t.host.NewStream(ctx, peerInfo.PeerID, protocol.ID(ProtocolID))
		if err != nil {
			t.removePeer(peerInfo.UsernameHash)
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ—Ç–æ–∫ –∫ –ø–∏—Ä—É: %w", err)
		}
		peerInfo.Stream = stream
	}

	packetData, err := proto.Marshal(packet)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–∞–∫–µ—Ç: %w", err)
	}

	length := uint32(len(packetData))
	if err := binary.Write(peerInfo.Stream, binary.BigEndian, length); err != nil {
		peerInfo.Stream.Reset()
		peerInfo.Stream = nil
		t.removePeer(peerInfo.UsernameHash)
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è: %w", err)
	}

	if _, err := peerInfo.Stream.Write(packetData); err != nil {
		peerInfo.Stream.Reset()
		peerInfo.Stream = nil
		t.removePeer(peerInfo.UsernameHash)
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %w", err)
	}

	t.handler.OnLog(LogLevelInfo, fmt.Sprintf("‚úâÔ∏è P2P —Å–æ–æ–±—â–µ–Ω–∏–µ (%d –±–∞–π—Ç) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Ä—É %s", length, truncateHash(peerInfo.UsernameHash)))
	return nil
}

// discoveryLoop –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –∞–Ω–æ–Ω—Å–∏—Ä—É–µ—Ç —Å–µ–±—è –≤ —Å–µ—Ç–∏
func (t *P2PTransport) discoveryLoop() {
	ticker := time.NewTicker(DiscoveryInterval)
	defer ticker.Stop()

	time.Sleep(15 * time.Second)
	t.announceSelf()

	for {
		select {
		case <-ticker.C:
			t.announceSelf()
		case <-t.ctx.Done():
			return
		}
	}
}

// createDiscoveryCID —Å–æ–∑–¥–∞–µ—Ç CID –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤ DHT
func createDiscoveryCID(hash string) (cid.Cid, error) {
	prefixedHash := "phantom-discovery-" + hash
	mh, err := multihash.Sum([]byte(prefixedHash), multihash.SHA2_256, -1)
	if err != nil {
		return cid.Undef, err
	}
	return cid.NewCidV1(cid.Raw, mh), nil
}

// announceSelf –∞–Ω–æ–Ω—Å–∏—Ä—É–µ—Ç –≤—Å–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
func (t *P2PTransport) announceSelf() {
	if t.dht == nil || t.myUsernameHash == "" || t.dht.RoutingTable().Size() == 0 {
		return
	}

	var allHashes []string
	if t.core != nil {
		allHashes = t.core.getP2PHashesForAnnouncement()
	} else if t.myUsernameHash != "" {
		allHashes = []string{t.myUsernameHash}
	}

	if len(allHashes) == 0 {
		return
	}

	successCount := 0
	for _, hash := range allHashes {
		ctx, cancel := context.WithTimeout(t.ctx, 45*time.Second)
		discoveryCID, err := createDiscoveryCID(hash)
		if err != nil {
			cancel()
			continue
		}
		if err := t.dht.Provide(ctx, discoveryCID, true); err == nil {
			successCount++
		}
		cancel()
	}
	if successCount > 0 {
		t.handler.OnLog(LogLevelInfo, fmt.Sprintf("üì¢ –£—Å–ø–µ—à–Ω–æ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ %d —Ö—ç—à(–µ–π) –≤ DHT", successCount))
	}
}

// findPeerInDHT –∏—â–µ—Ç –ø–∏—Ä–∞ –≤ DHT
func (t *P2PTransport) findPeerInDHT(usernameHash string) error {
	if t.dht == nil {
		return fmt.Errorf("DHT –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
	}

	discoveryCID, err := createDiscoveryCID(usernameHash)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å CID –¥–ª—è –ø–æ–∏—Å–∫–∞: %w", err)
	}

	ctx, cancel := context.WithTimeout(t.ctx, 60*time.Second)
	defer cancel()

	t.handler.OnLog(LogLevelInfo, fmt.Sprintf("üîé –ü–æ–∏—Å–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è CID: %s...", discoveryCID.String()))
	providers := t.dht.FindProvidersAsync(ctx, discoveryCID, 5)

	var providerFound bool
	for p := range providers {
		if p.ID == t.host.ID() {
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ–±—è
		}

		t.handler.OnLog(LogLevelInfo, fmt.Sprintf("‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø–∏—Ä %s –¥–ª—è %s", p.ID, truncateHash(usernameHash)))
		connectCtx, connectCancel := context.WithTimeout(ctx, 30*time.Second)
		if err := t.host.Connect(connectCtx, p); err != nil {
			t.handler.OnLog(LogLevelWarning, fmt.Sprintf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –ø–∏—Ä—É %s: %v", p.ID, err))
			connectCancel()
			continue
		}
		connectCancel()

		t.handler.OnLog(LogLevelInfo, fmt.Sprintf("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–∏—Ä—É %s", p.ID))
		t.updatePeerInfo(usernameHash, p.ID, p.Addrs...)
		providerFound = true
		break // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	}

	if !providerFound {
		return fmt.Errorf("–ø–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DHT")
	}
	return nil
}

// updatePeerInfo –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Ä–µ
func (t *P2PTransport) updatePeerInfo(usernameHash string, peerID peer.ID, addrs ...multiaddr.Multiaddr) {
	t.peersMu.Lock()
	defer t.peersMu.Unlock()

	isLocal := false
	if len(addrs) > 0 {
		for _, addr := range addrs {
			if isLocalAddress(addr.String()) {
				isLocal = true
				break
			}
		}
	}

	if info, exists := t.peers[usernameHash]; exists {
		info.LastSeen = time.Now()
		info.PeerID = peerID
		for _, addr := range addrs {
			if !containsAddr(info.Addresses, addr) {
				info.Addresses = append(info.Addresses, addr)
			}
		}
		if isLocal {
			info.IsLocal = true
		}
	} else {
		t.peers[usernameHash] = &P2PeerInfo{
			PeerID:       peerID,
			UsernameHash: usernameHash,
			LastSeen:     time.Now(),
			IsLocal:      isLocal,
			Addresses:    addrs,
		}
		location := "–≥–ª–æ–±–∞–ª—å–Ω–æ–π"
		if isLocal {
			location = "–ª–æ–∫–∞–ª—å–Ω–æ–π"
		}
		t.handler.OnLog(LogLevelInfo, fmt.Sprintf("üîó –ù–æ–≤—ã–π P2P –ø–∏—Ä %s –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ %s —Å–µ—Ç–∏", truncateHash(usernameHash), location))
	}
}

// getPeer –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Ä–µ
func (t *P2PTransport) getPeer(usernameHash string) *P2PeerInfo {
	t.peersMu.RLock()
	defer t.peersMu.RUnlock()
	return t.peers[usernameHash]
}

// removePeer —É–¥–∞–ª—è–µ—Ç –ø–∏—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
func (t *P2PTransport) removePeer(usernameHash string) {
	t.peersMu.Lock()
	defer t.peersMu.Unlock()
	delete(t.peers, usernameHash)
}

// cleanupPeers —É–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–∏—Ä–æ–≤
func (t *P2PTransport) cleanupPeers() {
	t.peersMu.Lock()
	defer t.peersMu.Unlock()

	cutoff := time.Now().Add(-5 * time.Minute)
	for hash, info := range t.peers {
		if info.LastSeen.Before(cutoff) {
			if info.Stream != nil {
				info.Stream.Close()
			}
			delete(t.peers, hash)
			t.handler.OnLog(LogLevelInfo, fmt.Sprintf("üóëÔ∏è –ü–∏—Ä %s —É–¥–∞–ª–µ–Ω (–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω)", truncateHash(hash)))
		}
	}
}

// maintainPeers –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø–∏—Ä–∞–º–∏
func (t *P2PTransport) maintainPeers() {
	ticker := time.NewTicker(60 * time.Second)
	defer ticker.Stop()
	for {
		select {
		case <-ticker.C:
			t.cleanupPeers()
		case <-t.ctx.Done():
			return
		}
	}
}

// mdnsDiscovery –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è mDNS —Å–µ—Ä–≤–∏—Å–∞
type mdnsDiscovery struct {
	service mdns.Service
}

// HandlePeerFound –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ mDNS –Ω–∞—Ö–æ–¥–∏—Ç –ø–∏—Ä–∞
func (t *P2PTransport) HandlePeerFound(pi peer.AddrInfo) {
	if pi.ID == t.host.ID() {
		return
	}
	ctx, cancel := context.WithTimeout(t.ctx, 10*time.Second)
	defer cancel()
	if err := t.host.Connect(ctx, pi); err == nil {
		t.handler.OnLog(LogLevelInfo, fmt.Sprintf("üì° –û–±–Ω–∞—Ä—É–∂–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–∏—Ä —á–µ—Ä–µ–∑ mDNS: %s", pi.ID))
	}
}

// ForceFindPeer –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—â–µ—Ç –ø–∏—Ä–∞ –≤ DHT
func (t *P2PTransport) ForceFindPeer(usernameHash string) {
	t.mu.RLock()
	if !t.isRunning {
		t.mu.RUnlock()
		return
	}
	t.mu.RUnlock()

	// –ï—Å–ª–∏ –ø–∏—Ä —É–∂–µ –≤–∏–¥–µ–Ω (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —á–µ—Ä–µ–∑ mDNS), –Ω–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ.
	if t.IsP2PAvailable(usernameHash) {
		t.handler.OnLog(LogLevelInfo, fmt.Sprintf("‚úÖ –ü–∏—Ä %s... —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø—Ä–æ–ø—É—â–µ–Ω.", truncateHash(usernameHash)))
		return
	}

	go func() {
		t.handler.OnLog(LogLevelInfo, fmt.Sprintf("üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–∏—Ä–∞ %s –≤ DHT...", truncateHash(usernameHash)))
		_ = t.findPeerInDHT(usernameHash)
	}()
}

func isLocalAddress(addr string) bool {
	return containsAny(addr, []string{
		"/ip4/192.168.", "/ip4/10.", "/ip4/172.16.", "/ip4/172.17.", "/ip4/172.18.",
		"/ip4/172.19.", "/ip4/172.20.", "/ip4/172.21.", "/ip4/172.22.", "/ip4/172.23.",
		"/ip4/172.24.", "/ip4/172.25.", "/ip4/172.26.", "/ip4/172.27.", "/ip4/172.28.",
		"/ip4/172.29.", "/ip4/172.30.", "/ip4/172.31.", "/ip4/127.", "/ip6/::1/",
		"/ip6/fe80::", "/ip6/fc00::", "/ip6/fd00::",
	})
}

func containsAny(s string, substrs []string) bool {
	for _, substr := range substrs {
		if strings.HasPrefix(s, substr) {
			return true
		}
	}
	return false
}

func containsAddr(addrs []multiaddr.Multiaddr, addr multiaddr.Multiaddr) bool {
	for _, a := range addrs {
		if a.Equal(addr) {
			return true
		}
	}
	return false
}
