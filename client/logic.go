// Copyright 2025 snaart
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package phantomcore

import (
	"bytes"
	"context"
	"crypto/hmac"
	"crypto/sha256"
	"crypto/sha512"
	"crypto/tls"
	"encoding/base64"
	"encoding/binary"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"log"
	proto2 "phantom/proto"
	"strings"
	"sync"
	"time"

	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/credentials"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"

	"github.com/cloudflare/circl/kem/kyber/kyber1024"
	"github.com/cloudflare/circl/sign"
	"github.com/cloudflare/circl/sign/dilithium/mode5"
	"github.com/gen2brain/beeep"
)

const (
	MaxMessageSize      = 32 * 1024
	workerPoolSize      = 10
	InitiateChatMessage = "__PHANTOM_INITIATE_CHAT__"
	serverPublicKeyB64  = "example"
)

var (
	serverPublicKey sign.PublicKey
)

type peerSession struct {
	initMutex          sync.Mutex
	pendingKeyResp     *proto2.KeyResponse
	pendingInboundPkts []*proto2.Packet
	isEstablished      bool
	keyRequestInFlight bool
}

type logicClient struct {
	ks             *KeyStore
	ms             *MessageStore
	username       string
	stream         proto2.Phantom_TransmitClient
	myUsernameHash string
	mu             sync.RWMutex
	peerSessions   map[string]*peerSession
	handler        CoreEventHandler
	contactsMu     sync.RWMutex
	usernameToHash map[string]string
	hashToUsername map[string]string
	packetQueue    chan *proto2.Packet
	wg             sync.WaitGroup
	p2pTransport   *P2PTransport // –°—Å—ã–ª–∫–∞ –Ω–∞ P2P —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
}

func init() {
	var err error
	if serverPublicKeyB64 == "" {
		log.Fatalf("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á —Å–µ—Ä–≤–µ—Ä–∞")
		return
	}
	keyBytes, err := base64.StdEncoding.DecodeString(serverPublicKeyB64)
	if err != nil {
		log.Fatalf("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
	scheme := mode5.Scheme()
	serverPublicKey, err = scheme.UnmarshalBinaryPublicKey(keyBytes)
	if err != nil {
		log.Fatalf("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å Dilithium5 –∫–ª—é—á —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
}

func newLogicClient(username string, ks *KeyStore, ms *MessageStore, handler CoreEventHandler) (*logicClient, error) {
	client := &logicClient{
		ks:             ks,
		ms:             ms,
		username:       username,
		peerSessions:   make(map[string]*peerSession),
		handler:        handler,
		usernameToHash: make(map[string]string),
		hashToUsername: make(map[string]string),
		packetQueue:    make(chan *proto2.Packet, 100),
	}
	return client, nil
}

// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ P2PMessageHandler

func (c *logicClient) GetUsernameHash() string {
	return c.myUsernameHash
}

// GetContactHashes –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ö—ç—à–µ–π –≤—Å–µ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è P2P –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
func (c *logicClient) GetContactHashes() []string {
	c.contactsMu.RLock()
	defer c.contactsMu.RUnlock()

	var hashes []string
	for _, hash := range c.usernameToHash {
		hashes = append(hashes, hash)
	}
	return hashes
}

func (c *logicClient) HandleP2PMessage(packet *proto2.Packet) error {
	c.handler.OnLog(LogLevelInfo, fmt.Sprintf("üì® –ü–æ–ª—É—á–µ–Ω P2P –ø–∞–∫–µ—Ç –æ—Ç %s...", truncateHash(packet.SourceClientIdHash)))

	switch pld := packet.Payload.(type) {
	case *proto2.Packet_EncryptedMessage:
		c.handleEncryptedMessage(packet)
	case *proto2.Packet_KeyRequest:
		c.handleP2PKeyRequest(packet)
	case *proto2.Packet_KeyResponse:
		c.handleKeyResponse(pld.KeyResponse)
	default:
		c.handler.OnLog(LogLevelWarning, "–ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø P2P –ø–∞–∫–µ—Ç–∞")
	}
	return nil
}

// handleP2PKeyRequest –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç P2P –∑–∞–ø—Ä–æ—Å –∫–ª—é—á–µ–π
func (c *logicClient) handleP2PKeyRequest(packet *proto2.Packet) {
	c.handler.OnLog(LogLevelInfo, fmt.Sprintf("üîë –ü–æ–ª—É—á–µ–Ω P2P –∑–∞–ø—Ä–æ—Å –∫–ª—é—á–µ–π –æ—Ç %s", truncateHash(packet.SourceClientIdHash)))

	session := c.getOrCreateSession(packet.SourceClientIdHash)
	session.initMutex.Lock()
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ª–∏ –º—ã —Å–∞–º–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–µ—Å—Å–∏–∏ —ç—Ç–æ–º—É –ø–∏—Ä—É.
	// `keyRequestInFlight` –±—É–¥–µ—Ç true, –µ—Å–ª–∏ –º—ã —É–∂–µ –≤—ã–∑–≤–∞–ª–∏ `sendMessageViaP2P` –±–µ–∑ —Å–µ—Å—Å–∏–∏.
	if session.keyRequestInFlight {
		// –ü—Ä–∞–≤–∏–ª–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞: –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç —Ç–æ—Ç, —É –∫–æ–≥–æ —Ö—ç—à "–º–µ–Ω—å—à–µ".
		if c.myUsernameHash < packet.SourceClientIdHash {
			// –ù–∞—à —Ö—ç—à –º–µ–Ω—å—à–µ. –ú—ã "–≤—ã–∏–≥—Ä—ã–≤–∞–µ–º" –≥–æ–Ω–∫—É. –ú—ã –±—É–¥–µ–º –ê–ª–∏—Å–æ–π.
			// –ü–æ—ç—Ç–æ–º—É –º—ã –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ò–• KeyRequest –∏ –∂–¥–µ–º KeyResponse –Ω–∞ –ù–ê–® –∑–∞–ø—Ä–æ—Å.
			c.handler.OnLog(LogLevelInfo, fmt.Sprintf("üèÅ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤—Å—Ç—Ä–µ—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è. –ú—ã –ø–æ–±–µ–¥–∏–ª–∏ (%s < %s). –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏—Ö –∑–∞–ø—Ä–æ—Å.", truncateHash(c.myUsernameHash), truncateHash(packet.SourceClientIdHash)))
			session.initMutex.Unlock()
			return
		}
		// –ù–∞—à —Ö—ç—à –±–æ–ª—å—à–µ. –ú—ã "–ø—Ä–æ–∏–≥—Ä–∞–ª–∏". –ú—ã –±—É–¥–µ–º –ë–æ–±–æ–º.
		// –ú—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞—à—É —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∏—Ö –∑–∞–ø—Ä–æ—Å.
		c.handler.OnLog(LogLevelInfo, fmt.Sprintf("üèÅ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤—Å—Ç—Ä–µ—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è. –ú—ã —É—Å—Ç—É–ø–∞–µ–º (%s > %s). –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∏—Ö –∑–∞–ø—Ä–æ—Å.", truncateHash(c.myUsernameHash), truncateHash(packet.SourceClientIdHash)))
		session.keyRequestInFlight = false // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, —Ç–∞–∫ –∫–∞–∫ –º—ã –±–æ–ª—å—à–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä
	}
	session.initMutex.Unlock()

	err := c.ks.WithUserAccount(c.username, func(ua *UserAccount) error {
		opksKyber := make(map[uint32][]byte)
		opksX25519 := make(map[uint32][]byte)

		// –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω OPK –¥–ª—è P2P –æ–±–º–µ–Ω–∞
		var chosenOPKID uint32
		for id, key := range ua.OneTimePreKeys {
			chosenOPKID = id
			pubBytesK, err := key.PublicKeyKyber.MarshalBinary()
			if err != nil {
				return err
			}
			opksKyber[id] = pubBytesK
			opksX25519[id] = key.PublicKeyX25519[:]
			break // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω
		}

		idPubDiliBytes, _ := ua.IdentityPublicDili.MarshalBinary()
		idPubKyberBytes, _ := ua.IdentityPublicKyber.MarshalBinary()
		spkPubKyberBytes, _ := ua.PreKeyPublicKyber.MarshalBinary()

		dataToSign := append(spkPubKyberBytes, ua.PreKeyPublicX25519[:]...)
		sig := mode5.Scheme().Sign(ua.IdentityPrivateDili, dataToSign, nil)

		prekeyBundle := &proto2.HybridPreKeyBundle{
			IdentityKeyDilithium:     idPubDiliBytes,
			IdentityKeyKyber:         idPubKyberBytes,
			IdentityKeyX25519:        ua.IdentityPublicX25519[:],
			SignedPrekeyKyber:        spkPubKyberBytes,
			SignedPrekeyX25519:       ua.PreKeyPublicX25519[:],
			PrekeySignatureDilithium: sig,
			OneTimePrekeysKyber:      opksKyber,
			OneTimePrekeysX25519:     opksX25519,
		}
		bundleData, err := proto.Marshal(prekeyBundle)
		if err != nil {
			return err
		}

		keyResp := &proto2.KeyResponse{
			HybridPrekeyBundle:  bundleData,
			ClientIdHash:        c.myUsernameHash,
			OneTimePrekeyKyber:  opksKyber[chosenOPKID],
			OneTimePrekeyX25519: opksX25519[chosenOPKID],
			OneTimePrekeyId:     chosenOPKID,
		}

		responsePacket := &proto2.Packet{
			SourceClientIdHash:      c.myUsernameHash,
			DestinationClientIdHash: packet.SourceClientIdHash,
			Payload:                 &proto2.Packet_KeyResponse{KeyResponse: keyResp},
		}

		if err := c.signPacket(responsePacket, ua.IdentityPrivateDili); err != nil {
			return err
		}

		if c.p2pTransport != nil {
			c.handler.OnLog(LogLevelInfo, fmt.Sprintf("üîë –û—Ç–ø—Ä–∞–≤–∫–∞ KeyResponse –ø–∏—Ä—É %s...", truncateHash(packet.SourceClientIdHash)))
			go c.p2pTransport.SendPacket(packet.SourceClientIdHash, responsePacket)
		}

		return nil
	})

	if err != nil {
		c.handler.OnLog(LogLevelError, fmt.Sprintf("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ P2P –∑–∞–ø—Ä–æ—Å–∞ –∫–ª—é—á–µ–π: %v", err))
	}
}

// sendMessageViaP2P –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ P2P —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
func (c *logicClient) sendMessageViaP2P(peerHash, text string, p2pTransport *P2PTransport) error {
	c.p2pTransport = p2pTransport
	contact, err := c.ks.LoadContact(peerHash)
	if err != nil {
		return fmt.Errorf("–Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %w", err)
	}

	if len(contact.RatchetState) == 0 {
		c.handler.OnLog(LogLevelInfo, "‚úÖ [HANDSHAKE] –®–∞–≥ 1: –°–µ—Å—Å–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–ª—é—á–µ–π (KeyRequest)...")

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –º—ã –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é.
		// –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑—Ä–µ—à–∏—Ç—å "–≥–æ–Ω–∫—É", –µ—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Å–¥–µ–ª–∞–µ—Ç —Ç–æ –∂–µ —Å–∞–º–æ–µ.
		session := c.getOrCreateSession(peerHash)
		session.initMutex.Lock()
		session.keyRequestInFlight = true
		session.initMutex.Unlock()

		keyReqPacket := &proto2.Packet{
			SourceClientIdHash:      c.myUsernameHash,
			DestinationClientIdHash: peerHash,
			Payload:                 &proto2.Packet_KeyRequest{KeyRequest: &proto2.KeyRequest{RequestedClientIdHash: peerHash}},
		}

		if err := c.ks.WithUserAccount(c.username, func(ua *UserAccount) error {
			return c.signPacket(keyReqPacket, ua.IdentityPrivateDili)
		}); err != nil {
			return err
		}

		if err := p2pTransport.SendPacket(peerHash, keyReqPacket); err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–ª—é—á–∏ —á–µ—Ä–µ–∑ P2P: %w", err)
		}

		c.handler.OnLog(LogLevelInfo, fmt.Sprintf("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è %s –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å.", contact.Username))
		contact.PendingUserMsgs = append(contact.PendingUserMsgs, text)

		if err := c.ms.SaveMessage(peerHash, true, time.Now().Unix(), text); err != nil {
			c.handler.OnLog(LogLevelError, fmt.Sprintf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å –≤ –ë–î: %v", err))
		}

		return c.ks.SaveContact(contact)
	}

	var ratchet DoubleRatchet
	if err := json.Unmarshal(contact.RatchetState, &ratchet); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: %w", err)
	}
	defer ratchet.Zeroize()

	headerData, ciphertext, err := ratchet.RatchetEncrypt([]byte(text), nil)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: %w", err)
	}

	if err := c.persistRatchetState(peerHash, &ratchet); err != nil {
		return err
	}

	packet := &proto2.Packet{
		SourceClientIdHash:      c.myUsernameHash,
		DestinationClientIdHash: peerHash,
		Payload: &proto2.Packet_EncryptedMessage{EncryptedMessage: &proto2.EncryptedMessage{
			RatchetHeader: headerData,
			Ciphertext:    ciphertext,
			Timestamp:     time.Now().Unix(),
		}},
	}

	// –ê—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞—è –ø–æ–¥–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –æ—Ç–∫–∞–∑—É–µ–º–æ—Å—Ç–∏ (Deniability).
	// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç—Å—è —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–º —Ç–µ–≥–æ–º AES-GCM.

	if err := p2pTransport.SendPacket(peerHash, packet); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ P2P: %w", err)
	}

	if err := c.ms.SaveMessage(peerHash, true, time.Now().Unix(), text); err != nil {
		c.handler.OnLog(LogLevelError, fmt.Sprintf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î: %v", err))
	}
	c.handler.OnLog(LogLevelInfo, fmt.Sprintf("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ P2P –ø–∏—Ä—É %s", truncateHash(peerHash)))
	return nil
}

// startProcessing –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–∞–∫–µ—Ç–æ–≤ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
func (c *logicClient) startProcessing(stream proto2.Phantom_TransmitClient, tlsConfig *tls.Config, readyChan chan<- error) {
	// –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ö—ç—à. –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã.
	myFinalHash, _, err := getHashesFromServerSecurely(c.username, "dummy", tlsConfig, c.handler)
	if err != nil {
		c.handler.OnLog(LogLevelError, fmt.Sprintf("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ö—ç—à: %v", err))
		readyChan <- err
		return
	}
	c.myUsernameHash = myFinalHash
	c.handler.OnLog(LogLevelInfo, fmt.Sprintf("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω. –í–∞—à —Ö—ç—à (%s): %s...", c.username, truncateHash(c.myUsernameHash)))

	// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã, —Ç–µ–ø–µ—Ä—å –∫–æ–≥–¥–∞ —É –Ω–∞—Å –µ—Å—Ç—å TLS –∫–æ–Ω—Ñ–∏–≥.
	c.initialContactSync(tlsConfig)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∏–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
	c.stream = stream
	if err := c.register(); err != nil {
		c.handler.OnConnectionStateChanged("Critical Error", err)
		readyChan <- err
		return
	}

	c.handler.OnLog(LogLevelInfo, fmt.Sprintf("–ó–∞–ø—É—Å–∫ %d –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–∞–∫–µ—Ç–æ–≤...", workerPoolSize))
	c.wg.Add(workerPoolSize)
	for i := 0; i < workerPoolSize; i++ {
		go c.packetWorker()
	}

	readyChan <- nil // –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ

	go c.handleIncoming()
}

func (c *logicClient) handleIncoming() {
	defer close(c.packetQueue)

	for {
		packet, err := c.stream.Recv()
		if err != nil {
			if errors.Is(err, io.EOF) || status.Code(err) == codes.Canceled {
				c.handler.OnConnectionStateChanged("Connection Closed", nil)
			} else {
				c.handler.OnConnectionStateChanged("Connection Lost", err)
				c.handler.OnLog(LogLevelWarning, fmt.Sprintf("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ: %v", err))
			}
			return
		}

		c.packetQueue <- packet
	}
}

func (c *logicClient) packetWorker() {
	defer c.wg.Done()

	for packet := range c.packetQueue {
		switch pld := packet.Payload.(type) {
		case *proto2.Packet_KeyResponse:
			c.handleKeyResponse(pld.KeyResponse)
		case *proto2.Packet_EncryptedMessage:
			c.handleEncryptedMessage(packet)
		case *proto2.Packet_SystemNotification:
			if c.handleSystemNotification(pld.SystemNotification) {
				c.handler.OnShutdown("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
			}
		}
	}
}

func (c *logicClient) getHashForUsername(username string) string {
	c.contactsMu.RLock()
	defer c.contactsMu.RUnlock()
	return c.usernameToHash[username]
}

func (c *logicClient) getUsernameForHash(hash string) string {
	c.contactsMu.RLock()
	defer c.contactsMu.RUnlock()
	return c.hashToUsername[hash]
}

func (c *logicClient) initialContactSync(tlsConfig *tls.Config) {
	c.handler.OnLog(LogLevelInfo, "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–æ–º...")
	contacts, err := c.ks.ListContactUsernames()
	if err != nil {
		c.handler.OnLog(LogLevelError, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ –ë–î –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: %v", err))
		return
	}

	newUsernameToHash := make(map[string]string)
	newHashToUsername := make(map[string]string)
	var contactInfos []ContactInfo

	for _, name := range contacts {
		_, hash, err := getHashesFromServerSecurely("dummy", name, tlsConfig, c.handler)
		if err == nil {
			newUsernameToHash[name] = hash
			newHashToUsername[hash] = name
			contactInfos = append(contactInfos, ContactInfo{Name: name, Hash: hash})

			// –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
			_, err := c.ks.LoadContact(hash)
			if err != nil {
				// –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
				contact := &Contact{
					Username:     name,
					UsernameHash: hash,
				}
				if err := c.ks.SaveContact(contact); err != nil {
					c.handler.OnLog(LogLevelWarning, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç %s –≤ –ë–î: %v", name, err))
				}
			}
		} else {
			c.handler.OnLog(LogLevelWarning, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ö–µ—à –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ '%s' –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.", name))
		}
	}

	c.contactsMu.Lock()
	c.usernameToHash = newUsernameToHash
	c.hashToUsername = newHashToUsername
	c.contactsMu.Unlock()

	c.handler.OnContactListUpdated(contactInfos)
	c.handler.OnLog(LogLevelInfo, fmt.Sprintf("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–≥—Ä—É–∂–µ–Ω–æ %d –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.", len(c.usernameToHash)))
}

func (c *logicClient) handleKeyResponse(resp *proto2.KeyResponse) {
	peerHash := resp.ClientIdHash
	c.handler.OnLog(LogLevelInfo, fmt.Sprintf("‚úÖ [HANDSHAKE] –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω KeyResponse –æ—Ç %s.", truncateHash(peerHash)))

	session := c.getOrCreateSession(peerHash)
	session.initMutex.Lock()
	defer session.initMutex.Unlock()

	contact, err := c.ks.LoadContact(peerHash)
	if err == nil && len(contact.RatchetState) > 0 {
		c.handler.OnLog(LogLevelInfo, fmt.Sprintf("–°–µ—Å—Å–∏—è —Å %s —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º KeyResponse.", truncateHash(peerHash)))
		return
	}

	session.pendingKeyResp = resp

	c.handler.OnLog(LogLevelInfo, "‚úÖ [HANDSHAKE] –®–∞–≥ 3: –ò–Ω–∏—Ü–∏–∏—Ä—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–µ—Å—Å–∏–∏ –∫–∞–∫ –ê–ª–∏—Å–∞...")
	if c.establishSessionAsAlice(session, peerHash) {
		c.handler.OnLog(LogLevelInfo, "‚úÖ [HANDSHAKE] –®–∞–≥ 4: –°–µ—Å—Å–∏—è –∫–∞–∫ –ê–ª–∏—Å–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
		c.handler.OnSessionEstablished(peerHash)

		freshContact, err := c.ks.LoadContact(peerHash)
		if err == nil && freshContact != nil {
			go c.processUserMessages(freshContact)
		}
	} else {
		c.handler.OnLog(LogLevelError, fmt.Sprintf("‚ùå [HANDSHAKE] –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é —Å %s –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π.", truncateHash(peerHash)))
	}
}

func (c *logicClient) establishSessionAsAlice(session *peerSession, peerHash string) bool {
	contact, err := c.ks.LoadContact(peerHash)
	if err == nil && len(contact.RatchetState) > 0 {
		return true
	}

	c.handler.OnLog(LogLevelInfo, "–í—ã –≤—ã—Å—Ç—É–ø–∞–µ—Ç–µ –≤ —Ä–æ–ª–∏ –ò–ù–ò–¶–ò–ê–¢–û–†–ê. –°–æ–∑–¥–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏...")
	ratchet, initialCts, err := c.initAlice(session)
	if err != nil {
		c.handler.OnLog(LogLevelError, fmt.Sprintf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (Alice): %v", err))
		return false
	}
	defer ratchet.Zeroize()

	c.handler.OnLog(LogLevelInfo, "–°–µ—Å—Å–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏...")
	initiationPayload := fmt.Sprintf("%s:%s", InitiateChatMessage, c.username)

	err = c.sendEncryptedPacket(peerHash, initiationPayload, ratchet, initialCts)
	if err != nil {
		c.handler.OnLog(LogLevelError, fmt.Sprintf("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∞–∫–µ—Ç –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏: %v", err))
		return false
	}

	session.initMutex.Lock()
	session.isEstablished = true
	session.initMutex.Unlock()

	return true
}

func (c *logicClient) sendEncryptedPacket(peerHash, text string, ratchet *DoubleRatchet, initialCts *InitialCiphertexts) error {
	finalHeaderData, ciphertext, err := ratchet.RatchetEncrypt([]byte(text), initialCts)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: %w", err)
	}

	if err := c.persistRatchetState(peerHash, ratchet); err != nil {
		return err
	}

	packet := &proto2.Packet{
		SourceClientIdHash:      c.myUsernameHash,
		DestinationClientIdHash: peerHash,
		Payload: &proto2.Packet_EncryptedMessage{EncryptedMessage: &proto2.EncryptedMessage{
			RatchetHeader: finalHeaderData,
			Ciphertext:    ciphertext,
			Timestamp:     time.Now().Unix(),
		}},
	}

	// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–∞–∫–µ—Ç –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–≤—Ç–æ—Ä—Å—Ç–≤–∞ –∫–ª—é—á–µ–π.
	// –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –æ—Ç–∫–∞–∑—É–µ–º–æ—Å—Ç–∏ (deniability).
	if initialCts != nil {
		err = c.ks.WithUserAccount(c.username, func(ua *UserAccount) error {
			return c.signPacket(packet, ua.IdentityPrivateDili)
		})
		if err != nil {
			return err
		}
	}

	// –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ P2P –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
	if c.p2pTransport != nil && c.p2pTransport.IsP2PAvailable(peerHash) {
		if err := c.p2pTransport.SendPacket(peerHash, packet); err == nil {
			c.handler.OnLog(LogLevelInfo, "‚úâÔ∏è –ü–∞–∫–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ P2P")
			return nil
		}
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
	go func() {
		if c.stream == nil {
			c.handler.OnLog(LogLevelError, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: gRPC –ø–æ—Ç–æ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
			return
		}
		if err := c.stream.Send(packet); err != nil {
			c.handler.OnLog(LogLevelError, fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞–∫–µ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: %v", err))
		}
	}()
	return nil
}

func (c *logicClient) handleEncryptedMessage(packet *proto2.Packet) {
	peerHash := packet.SourceClientIdHash
	session := c.getOrCreateSession(peerHash)

	session.initMutex.Lock()

	contact, _ := c.ks.LoadContact(peerHash)
	if contact != nil && len(contact.RatchetState) > 0 {
		session.initMutex.Unlock()
		c.decryptAndHandle(packet)
		return
	}

	session.pendingInboundPkts = append(session.pendingInboundPkts, packet)

	if session.keyRequestInFlight {
		session.initMutex.Unlock()
		return
	}

	session.keyRequestInFlight = true
	session.initMutex.Unlock()

	c.handler.OnLog(LogLevelInfo, fmt.Sprintf("–ü–æ–ª—É—á–µ–Ω –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç –æ—Ç %s, –Ω–æ –∫–ª—é—á–∏ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã. –ó–∞–ø—Ä–æ—Å –∫–ª—é—á–µ–π...", truncateHash(peerHash)))
	c.requestKeys(peerHash)
}

func (c *logicClient) processInboundPackets(packetsToProcess []*proto2.Packet) {
	if len(packetsToProcess) == 0 {
		return
	}
	peerHash := packetsToProcess[0].SourceClientIdHash

	established := c.tryEstablishSessionAsBob(peerHash, packetsToProcess[0])
	if established {
		c.handler.OnSessionEstablished(peerHash)
	}

	for _, packet := range packetsToProcess {
		c.decryptAndHandle(packet)
	}
}

func (c *logicClient) tryEstablishSessionAsBob(peerHash string, packet *proto2.Packet) bool {
	contact, err := c.ks.LoadContact(peerHash)
	if err == nil && len(contact.RatchetState) > 0 {
		return true
	}

	session := c.getOrCreateSession(peerHash)

	if session.pendingKeyResp == nil {
		return false
	}

	msg := packet.GetEncryptedMessage()
	var headerWithInitialCts struct {
		RatchetHeader
		InitialCiphertexts *InitialCiphertexts `json:"initial_cts,omitempty"`
	}
	if err := json.Unmarshal(msg.RatchetHeader, &headerWithInitialCts); err != nil {
		return false
	}
	if headerWithInitialCts.InitialCiphertexts == nil {
		return false
	}

	var ratchet *DoubleRatchet
	err = c.ks.WithUserAccount(c.username, func(ua *UserAccount) error {
		var initErr error
		ratchet, initErr = c.initBob(session, ua, headerWithInitialCts.RatchetHeader, headerWithInitialCts.InitialCiphertexts)
		return initErr
	})

	if err != nil {
		c.handler.OnLog(LogLevelError, fmt.Sprintf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ –∏–∑ –ø–∞–∫–µ—Ç–∞: %v", err))
		return false
	}
	defer ratchet.Zeroize()

	if err := c.persistRatchetState(peerHash, ratchet); err != nil {
		c.handler.OnLog(LogLevelError, fmt.Sprintf("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–æ–±–∞: %v", err))
		return false
	}

	session.initMutex.Lock()
	session.isEstablished = true
	session.initMutex.Unlock()

	if newContact, err := c.ks.LoadContact(peerHash); err == nil && newContact != nil {
		go c.processUserMessages(newContact)
	}
	return true
}

func (c *logicClient) decryptAndHandle(packet *proto2.Packet) {
	peerHash := packet.SourceClientIdHash
	contact, err := c.ks.LoadContact(peerHash)

	// **–ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï**
	if err != nil || len(contact.RatchetState) == 0 {
		c.handler.OnLog(LogLevelInfo, fmt.Sprintf("–ü–æ–ª—É—á–µ–Ω —à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç –æ—Ç %s, –Ω–æ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç. –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–∫ –ë–æ–±...", truncateHash(peerHash)))

		if c.tryEstablishSessionAsBob(peerHash, packet) {
			c.handler.OnLog(LogLevelInfo, "‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ –ë–æ–±. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞...")
			c.decryptAndHandle(packet) // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ç–µ–º –∂–µ –ø–∞–∫–µ—Ç–æ–º
		} else {
			c.handler.OnLog(LogLevelWarning, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –∫–∞–∫ –ë–æ–±. –ü–∞–∫–µ—Ç –æ—Ç %s –æ—Ç–±—Ä–æ—à–µ–Ω.", truncateHash(peerHash)))
		}
		return
	}

	var ratchet DoubleRatchet
	if err := json.Unmarshal(contact.RatchetState, &ratchet); err != nil {
		c.handler.OnLog(LogLevelError, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: %v", err))
		return
	}
	defer ratchet.Zeroize()

	plaintextBytes, err := ratchet.RatchetDecrypt(packet.GetEncryptedMessage().RatchetHeader, packet.GetEncryptedMessage().Ciphertext)
	if err != nil {
		c.handler.OnLog(LogLevelError, fmt.Sprintf("–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: %v", err))
		return
	}
	c.handler.OnLog(LogLevelInfo, fmt.Sprintf("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ.", truncateHash(peerHash)))

	if err := c.persistRatchetState(peerHash, &ratchet); err != nil {
		c.handler.OnLog(LogLevelCritical, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: %v", err))
	}

	plaintext := string(plaintextBytes)
	timestamp := packet.GetEncryptedMessage().Timestamp

	if strings.HasPrefix(plaintext, InitiateChatMessage) {
		parts := strings.SplitN(plaintext, ":", 2)
		if len(parts) == 2 {
			revealedUsername := parts[1]
			c.handler.OnLog(LogLevelInfo, fmt.Sprintf("–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ %s (%s...) –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —á–∞—Ç.", revealedUsername, truncateHash(packet.SourceClientIdHash)))

			go beeep.Notify("–ù–æ–≤—ã–π —á–∞—Ç", fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '%s' —Ö–æ—á–µ—Ç –Ω–∞—á–∞—Ç—å —Å –≤–∞–º–∏ –¥–∏–∞–ª–æ–≥.", revealedUsername), "")

			if contact.Username == "" || strings.HasPrefix(contact.Username, "–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü") {
				contact.Username = revealedUsername
				if err := c.ks.SaveContact(contact); err != nil {
					c.handler.OnLog(LogLevelError, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: %v", err))
				} else {
					c.contactsMu.Lock()
					c.usernameToHash[revealedUsername] = peerHash
					c.hashToUsername[peerHash] = revealedUsername
					c.contactsMu.Unlock()

					c.handler.OnLog(LogLevelInfo, "–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ UI...")

					c.contactsMu.RLock()
					var allContacts []ContactInfo
					for name, hash := range c.usernameToHash {
						allContacts = append(allContacts, ContactInfo{Name: name, Hash: hash, IsOnline: true})
					}
					c.contactsMu.RUnlock()

					c.handler.OnContactListUpdated(allContacts)
				}
			}
		}
		return
	}

	var senderName string
	if contact != nil && contact.Username != "" {
		senderName = contact.Username
	} else {
		senderName = c.getUsernameForHash(peerHash)
		if senderName == "" {
			senderName = truncateHash(peerHash)
		}
	}

	if err := c.ms.SaveMessage(peerHash, false, timestamp, plaintext); err != nil {
		c.handler.OnLog(LogLevelError, fmt.Sprintf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î: %v", err))
	}

	msg := StoredMessage{
		SessionHash: peerHash, IsOutgoing: false, Timestamp: timestamp, Content: plaintext,
	}

	go beeep.Notify(fmt.Sprintf("New message from %s", senderName), plaintext, "")
	c.handler.OnMessageReceived(msg)
}

func (c *logicClient) processUserMessages(contact *Contact) {
	if len(contact.PendingUserMsgs) == 0 {
		return
	}
	messagesToSend := contact.PendingUserMsgs
	contact.PendingUserMsgs = []string{}

	if err := c.ks.SaveContact(contact); err != nil {
		c.handler.OnLog(LogLevelError, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –≤ –ë–î –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π: %v", err))
	}

	c.handler.OnLog(LogLevelInfo, fmt.Sprintf("‚úÖ [HANDSHAKE] –®–∞–≥ 5: –°–µ—Å—Å–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–∫–∞ %d –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è %s...", len(messagesToSend), contact.Username))

	for _, text := range messagesToSend {
		if err := c.sendMessageViaP2P(contact.UsernameHash, text, c.p2pTransport); err != nil {
			c.handler.OnLog(LogLevelError, fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è '%s': %v.", text, err))
		}
		time.Sleep(100 * time.Millisecond)
	}
}

func (c *logicClient) startNewChat(peerUsername string, tlsConfig *tls.Config) error {
	_, peerHash, err := getHashesFromServerSecurely(c.username, peerUsername, tlsConfig, c.handler)
	if err != nil {
		return fmt.Errorf("could not get hash for %s: %w", peerUsername, err)
	}

	c.contactsMu.Lock()
	c.usernameToHash[peerUsername] = peerHash
	c.hashToUsername[peerHash] = peerUsername
	c.contactsMu.Unlock()

	contact, _ := c.ks.LoadContact(peerHash)
	if contact == nil {
		contact = &Contact{Username: peerUsername, UsernameHash: peerHash}
		if err := c.ks.SaveContact(contact); err != nil {
			return fmt.Errorf("could not save new contact: %w", err)
		}
		go c.initialContactSync(tlsConfig)
	}

	c.handler.OnLog(LogLevelInfo, fmt.Sprintf("Starting new chat with %s (%s...)", peerUsername, truncateHash(peerHash)))
	return c.requestKeys(peerHash)
}

func (c *logicClient) sendMessage(peerHash, text string) error {
	contact, err := c.ks.LoadContact(peerHash)
	if err != nil {
		return fmt.Errorf("–Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %w", err)
	}

	if len(contact.RatchetState) > 0 {
		var ratchet DoubleRatchet
		if err := json.Unmarshal(contact.RatchetState, &ratchet); err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: %w", err)
		}
		defer ratchet.Zeroize()

		err := c.sendEncryptedPacket(peerHash, text, &ratchet, nil)
		if err == nil {
			c.ms.SaveMessage(peerHash, true, time.Now().Unix(), text)
		}
		return err
	}

	c.handler.OnLog(LogLevelInfo, "–°–µ—Å—Å–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
	contact.PendingUserMsgs = append(contact.PendingUserMsgs, text)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ –æ—á–µ—Ä–µ–¥–∏
	if err := c.ks.SaveContact(contact); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å: %w", err)
	}

	// –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å, –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º —Ö–µ–Ω–¥—à–µ–π–∫,
	// –æ—Ç–ø—Ä–∞–≤–ª—è—è –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–ª—é—á–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä.
	return c.requestKeys(peerHash)
}

func (c *logicClient) initAlice(session *peerSession) (*DoubleRatchet, *InitialCiphertexts, error) {
	resp := session.pendingKeyResp
	var prekeyBundle proto2.HybridPreKeyBundle
	if err := proto.Unmarshal(resp.HybridPrekeyBundle, &prekeyBundle); err != nil {
		return nil, nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ HybridPreKeyBundle: %w", err)
	}
	diliScheme, kemScheme := mode5.Scheme(), kyber1024.Scheme()
	theirIKeyDili, err := diliScheme.UnmarshalBinaryPublicKey(prekeyBundle.IdentityKeyDilithium)
	if err != nil {
		return nil, nil, err
	}
	theirIKeyKyber, err := kemScheme.UnmarshalBinaryPublicKey(prekeyBundle.IdentityKeyKyber)
	if err != nil {
		return nil, nil, err
	}
	theirSPKeyKyber, err := kemScheme.UnmarshalBinaryPublicKey(prekeyBundle.SignedPrekeyKyber)
	if err != nil {
		return nil, nil, err
	}

	if len(prekeyBundle.IdentityKeyX25519) != 32 || len(prekeyBundle.SignedPrekeyX25519) != 32 {
		return nil, nil, errors.New("–Ω–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–π –≤ –±–∞–Ω–¥–ª–µ")
	}
	theirIKeyX25519, theirSPKeyX25519 := (*[32]byte)(prekeyBundle.IdentityKeyX25519), (*[32]byte)(prekeyBundle.SignedPrekeyX25519)
	dataToVerify := append(prekeyBundle.SignedPrekeyKyber, prekeyBundle.SignedPrekeyX25519...)
	if !mode5.Verify(theirIKeyDili.(*mode5.PublicKey), dataToVerify, prekeyBundle.PrekeySignatureDilithium) {
		return nil, nil, errors.New("–≥–∏–±—Ä–∏–¥: –Ω–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å prekey —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ (Dilithium5)")
	}
	if err := c.verifyIdentityKeys(theirIKeyDili, theirIKeyX25519, resp.ClientIdHash); err != nil {
		return nil, nil, err
	}
	var theirOPKeyKyber *kyber1024.PublicKey
	var theirOPKeyX25519 *[32]byte
	if len(resp.OneTimePrekeyKyber) > 0 {
		opk, err := kemScheme.UnmarshalBinaryPublicKey(resp.OneTimePrekeyKyber)
		if err != nil {
			return nil, nil, err
		}
		theirOPKeyKyber = opk.(*kyber1024.PublicKey)
		if len(resp.OneTimePrekeyX25519) != 32 {
			return nil, nil, errors.New("–ø–æ–ª—É—á–µ–Ω OPK Kyber, –Ω–æ OPK X25519 –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—É—é –¥–ª–∏–Ω—É")
		}
		theirOPKeyX25519 = (*[32]byte)(resp.OneTimePrekeyX25519)
	} else {
		c.handler.OnLog(LogLevelWarning, "–í–ù–ò–ú–ê–ù–ò–ï: –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –∫–ª—é—á–∏ (OPK).")
	}
	ratchet, initialCts, err := RatchetInitAlice(theirIKeyKyber.(*kyber1024.PublicKey), theirIKeyX25519, theirSPKeyKyber.(*kyber1024.PublicKey), theirSPKeyX25519, theirOPKeyKyber, theirOPKeyX25519, resp.OneTimePrekeyId)
	if err != nil {
		return nil, nil, err
	}

	return ratchet, initialCts, nil
}

func (c *logicClient) initBob(session *peerSession, ua *UserAccount, header RatchetHeader, initialCts *InitialCiphertexts) (*DoubleRatchet, error) {
	resp := session.pendingKeyResp
	var prekeyBundle proto2.HybridPreKeyBundle
	if err := proto.Unmarshal(resp.HybridPrekeyBundle, &prekeyBundle); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ HybridPreKeyBundle –¥–ª—è Bob: %w", err)
	}
	diliScheme, kemScheme := mode5.Scheme(), kyber1024.Scheme()
	theirIKeyDili, err := diliScheme.UnmarshalBinaryPublicKey(prekeyBundle.IdentityKeyDilithium)
	if err != nil {
		return nil, err
	}

	if len(prekeyBundle.IdentityKeyX25519) != 32 {
		return nil, errors.New("–Ω–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ X25519 IK –≤ –±–∞–Ω–¥–ª–µ –ë–æ–±–∞")
	}
	theirIKeyX25519 := (*[32]byte)(prekeyBundle.IdentityKeyX25519)
	if err := c.verifyIdentityKeys(theirIKeyDili, theirIKeyX25519, resp.ClientIdHash); err != nil {
		return nil, err
	}
	pk, err := kemScheme.UnmarshalBinaryPublicKey(header.KyberPublicKey)
	if err != nil {
		return nil, err
	}
	theirEphemeralKyberPub := pk.(*kyber1024.PublicKey)
	if len(initialCts.EphemeralECPublicKey) != 32 {
		return nil, errors.New("–Ω–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ —ç—Ñ–µ–º–µ—Ä–Ω–æ–≥–æ –∫–ª—é—á–∞ –ê–ª–∏—Å—ã")
	}
	theirEphemeralECPub := (*[32]byte)(initialCts.EphemeralECPublicKey)
	opkID := initialCts.OPKID
	ourUsedOneTimeKey, ok := ua.OneTimePreKeys[opkID]
	var ourOpkPrivKyber *kyber1024.PrivateKey
	var ourOpkPrivX25519 *[32]byte
	if ok {
		c.handler.OnLog(LogLevelInfo, fmt.Sprintf("–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –Ω–∞—à –≥–∏–±—Ä–∏–¥–Ω—ã–π OPK #%d.", opkID))
		ourOpkPrivKyber, ourOpkPrivX25519 = ourUsedOneTimeKey.PrivateKeyKyber, ourUsedOneTimeKey.PrivateKeyX25519
	} else if len(initialCts.OPKCiphertext) > 0 {
		return nil, fmt.Errorf("–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª OPK —Å ID %d, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –Ω–∞–π–¥–µ–Ω —É –Ω–∞—Å", opkID)
	}
	ratchet, err := RatchetInitBob(ua.IdentityPrivateKyber, ua.IdentityPrivateX25519, ua.PreKeyPrivateKyber, ua.PreKeyPrivateX25519, ourOpkPrivKyber, ourOpkPrivX25519, theirEphemeralKyberPub, theirEphemeralECPub, initialCts)
	if err != nil {
		return nil, err
	}

	if ok {
		delete(ua.OneTimePreKeys, opkID)
		if err := c.ks.saveAccount(ua); err != nil {
			c.handler.OnLog(LogLevelWarning, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è OPK: %v", err))
		}
	}
	return ratchet, nil
}

func (c *logicClient) getOrCreateSession(peerHash string) *peerSession {
	c.mu.RLock()
	session, exists := c.peerSessions[peerHash]
	c.mu.RUnlock()
	if exists {
		return session
	}

	c.mu.Lock()
	defer c.mu.Unlock()

	session, exists = c.peerSessions[peerHash]
	if exists {
		return session
	}

	c.handler.OnLog(LogLevelInfo, fmt.Sprintf("–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø—É—Å—Ç–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è %s...", truncateHash(peerHash)))
	session = &peerSession{}
	c.peerSessions[peerHash] = session

	return session
}

func (c *logicClient) verifyIdentityKeys(newKeyDili sign.PublicKey, newKeyX25519 *[32]byte, peerHash string) error {
	contact, err := c.ks.LoadContact(peerHash)
	if err == nil && contact != nil && contact.IdentityPublicDili != nil && contact.IdentityPublicX25519 != nil {
		diliChanged := !contact.IdentityPublicDili.Equal(newKeyDili)
		ecChanged := !bytes.Equal(contact.IdentityPublicX25519[:], newKeyX25519[:])
		if diliChanged || ecChanged {
			c.handler.OnLog(LogLevelWarning, "–í–ù–ò–ú–ê–ù–ò–ï: –ö–ª—é—á –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è! –í–æ–∑–º–æ–∂–Ω–∞ –∞—Ç–∞–∫–∞.")
			return errors.New("—Å–º–µ–Ω–∞ –∫–ª—é—á–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
		}
	}
	if contact == nil {
		contact = &Contact{UsernameHash: peerHash}
	}
	contact.IdentityPublicDili, contact.IdentityPublicX25519 = newKeyDili, newKeyX25519
	if err := c.ks.SaveContact(contact); err != nil {
		c.handler.OnLog(LogLevelError, fmt.Sprintf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è IdentityKey: %v", err))
	}
	return nil
}

func (c *logicClient) register() error {
	c.handler.OnLog(LogLevelInfo, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å –≥–∏–±—Ä–∏–¥–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏...")

	return c.ks.WithUserAccount(c.username, func(ua *UserAccount) error {
		opksKyber := make(map[uint32][]byte)
		opksX25519 := make(map[uint32][]byte)
		for id, key := range ua.OneTimePreKeys {
			pubBytesK, err := key.PublicKeyKyber.MarshalBinary()
			if err != nil {
				return err
			}
			opksKyber[id], opksX25519[id] = pubBytesK, key.PublicKeyX25519[:]
		}

		idPubDiliBytes, err := ua.IdentityPublicDili.MarshalBinary()
		if err != nil {
			return err
		}
		idPubKyberBytes, err := ua.IdentityPublicKyber.MarshalBinary()
		if err != nil {
			return err
		}
		spkPubKyberBytes, err := ua.PreKeyPublicKyber.MarshalBinary()
		if err != nil {
			return err
		}

		idPubX25519Bytes := ua.IdentityPublicX25519[:]
		spkPubX25519Bytes := ua.PreKeyPublicX25519[:]
		dataToSign := append(spkPubKyberBytes, spkPubX25519Bytes...)

		sig := mode5.Scheme().Sign(ua.IdentityPrivateDili, dataToSign, nil)

		prekeyBundle := &proto2.HybridPreKeyBundle{
			IdentityKeyDilithium: idPubDiliBytes, IdentityKeyKyber: idPubKyberBytes, IdentityKeyX25519: idPubX25519Bytes,
			SignedPrekeyKyber: spkPubKyberBytes, SignedPrekeyX25519: spkPubX25519Bytes,
			PrekeySignatureDilithium: sig, OneTimePrekeysKyber: opksKyber, OneTimePrekeysX25519: opksX25519,
		}
		bundleData, err := proto.Marshal(prekeyBundle)
		if err != nil {
			return err
		}

		// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
		regRequest := &proto2.RegistrationRequest{
			HybridPrekeyBundle: bundleData,
		}

		// –î–æ–±–∞–≤–ª—è–µ–º P2P –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ P2P —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∞–∫—Ç–∏–≤–µ–Ω
		if c.p2pTransport != nil {
			peerID := c.getP2PPeerID()
			addresses := c.getP2PAddresses()
			if peerID != "" && len(addresses) > 0 {
				regRequest.P2PInfo = &proto2.P2PInfo{
					PeerId:       peerID,
					Addresses:    addresses,
					PreferP2P:    true,
					RelayWilling: false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ relay
				}
				c.handler.OnLog(LogLevelInfo, "üì° –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å P2P –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
			}
		}

		packet := &proto2.Packet{
			SourceClientIdHash: c.myUsernameHash,
			Payload:            &proto2.Packet_RegistrationRequest{RegistrationRequest: regRequest},
		}

		if err := c.signPacket(packet, ua.IdentityPrivateDili); err != nil {
			return err
		}

		c.handler.OnLog(LogLevelInfo, fmt.Sprintf("‚úÖ –ì–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–∞–∫–µ—Ç —Å %d OPK –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", len(opksKyber)))
		return c.stream.Send(packet)
	})
}

func (c *logicClient) requestKeys(userHash string) error {
	c.handler.OnLog(LogLevelInfo, fmt.Sprintf("–ó–∞–ø—Ä–æ—Å –∫–ª—é—á–µ–π –¥–ª—è %s...", truncateHash(userHash)))
	packet := &proto2.Packet{
		SourceClientIdHash: c.myUsernameHash,
		Payload:            &proto2.Packet_KeyRequest{KeyRequest: &proto2.KeyRequest{RequestedClientIdHash: userHash}},
	}

	err := c.ks.WithUserAccount(c.username, func(ua *UserAccount) error {
		return c.signPacket(packet, ua.IdentityPrivateDili)
	})
	if err != nil {
		return err
	}

	return c.stream.Send(packet)
}

func (c *logicClient) persistRatchetState(userHash string, ratchet *DoubleRatchet) error {
	contact, err := c.ks.LoadContact(userHash)
	if err != nil {
		contact = &Contact{UsernameHash: userHash}
	}
	ratchetData, err := json.Marshal(ratchet)
	if err != nil {
		c.handler.OnLog(LogLevelCritical, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ç—Ç—á–µ—Ç–∞: %v", err))
		return err
	}
	contact.RatchetState = ratchetData
	if err := c.ks.SaveContact(contact); err != nil {
		c.handler.OnLog(LogLevelCritical, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤ –ë–î: %v", err))
		return err
	}
	return nil
}

func (c *logicClient) signPacket(packet *proto2.Packet, privKey sign.PrivateKey) error {
	packetCopy := proto.Clone(packet).(*proto2.Packet)
	packetCopy.Signature = nil
	data, err := proto.Marshal(packetCopy)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏: %w", err)
	}
	packet.Signature = mode5.Scheme().Sign(privKey, data, nil)
	return nil
}

func (c *logicClient) handleSystemNotification(notif *proto2.SystemNotification) bool {
	switch notif.Type {
	case proto2.SystemNotification_OPK_LOW:
		c.handler.OnLog(LogLevelWarning, "–í–ù–ò–ú–ê–ù–ò–ï: –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –≤–∞—à–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –∫–ª—é—á–∏ (OPK).")
		go c.replenishOPKsAndReregister()
	case proto2.SystemNotification_REGISTRATION_FAILED_USERNAME_TAKEN:
		c.handler.OnLog(LogLevelCritical, fmt.Sprintf("–û–®–ò–ë–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò: %s", notif.Message))
		return true
	case proto2.SystemNotification_P2P_AVAILABLE:
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ P2P
		if notif.P2PInfo != nil && c.p2pTransport != nil {
			c.handler.OnLog(LogLevelInfo, fmt.Sprintf("üåê –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –ø–∏—Ä –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ P2P"))
			c.updateP2PPeerInfo(notif.P2PInfo)
		}
	case proto2.SystemNotification_P2P_PEER_INFO:
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ P2P –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∏—Ä–µ
		if notif.P2PInfo != nil && c.p2pTransport != nil {
			c.handler.OnLog(LogLevelInfo, fmt.Sprintf("üì° –ü–æ–ª—É—á–µ–Ω–∞ P2P –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—Ä–µ"))
			c.updateP2PPeerInfo(notif.P2PInfo)
		}
	}
	return false
}

// updateP2PPeerInfo –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ P2P –ø–∏—Ä–µ
func (c *logicClient) updateP2PPeerInfo(info *proto2.P2PInfo) {
	if c.p2pTransport == nil || info == nil {
		return
	}

	// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–∏—Ä—É –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
	go func() {
		for _, addr := range info.Addresses {
			c.handler.OnLog(LogLevelInfo, fmt.Sprintf("üîó –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ P2P –∞–¥—Ä–µ—Å—É: %s", addr))
			// P2P —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å–∞–º –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
		}
	}()
}

// getP2PPeerID –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç PeerID –¥–ª—è P2P —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
func (c *logicClient) getP2PPeerID() string {
	if c.p2pTransport == nil || c.p2pTransport.host == nil {
		return ""
	}
	return c.p2pTransport.host.ID().String()
}

// getP2PAddresses –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç multiaddr –∞–¥—Ä–µ—Å–∞ –¥–ª—è P2P —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
func (c *logicClient) getP2PAddresses() []string {
	if c.p2pTransport == nil || c.p2pTransport.host == nil {
		return nil
	}

	addrs := c.p2pTransport.host.Addrs()
	result := make([]string, 0, len(addrs))

	hostID := c.p2pTransport.host.ID().String()
	for _, addr := range addrs {
		// –î–æ–±–∞–≤–ª—è–µ–º PeerID –∫ –∞–¥—Ä–µ—Å—É
		fullAddr := fmt.Sprintf("%s/p2p/%s", addr.String(), hostID)
		result = append(result, fullAddr)
	}

	return result
}

// sendP2PUpdate –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ P2P –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
func (c *logicClient) sendP2PUpdate() error {
	if c.stream == nil || c.p2pTransport == nil {
		return nil
	}

	addresses := c.getP2PAddresses()
	if len(addresses) == 0 {
		return nil
	}

	update := &proto2.P2PUpdate{
		Addresses:    addresses,
		RelayWilling: false,
	}

	packet := &proto2.Packet{
		SourceClientIdHash: c.myUsernameHash,
		Payload:            &proto2.Packet_P2PUpdate{P2PUpdate: update},
	}

	err := c.ks.WithUserAccount(c.username, func(ua *UserAccount) error {
		return c.signPacket(packet, ua.IdentityPrivateDili)
	})
	if err != nil {
		return err
	}

	return c.stream.Send(packet)
}

func (c *logicClient) replenishOPKsAndReregister() {
	err := c.ks.WithUserAccount(c.username, func(ua *UserAccount) error {
		c.handler.OnLog(LogLevelInfo, "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ OPK...")
		newAccount, err := c.ks.ReplenishOPKs(c.username, ua)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è OPK –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î: %v", err)
		}
		c.handler.OnLog(LogLevelInfo, fmt.Sprintf("‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ OPK –ø–æ–ø–æ–ª–Ω–µ–Ω—ã. –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d.", len(newAccount.OneTimePreKeys)))
		return nil
	})

	if err != nil {
		c.handler.OnLog(LogLevelError, err.Error())
		return
	}

	if err := c.register(); err != nil {
		c.handler.OnLog(LogLevelError, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –Ω–æ–≤—ã–º–∏ OPK: %v", err))
	}
}

func (c *logicClient) generateSafetyNumber(peerHash string) (string, error) {
	var safetyNumber string
	err := c.ks.WithUserAccount(c.username, func(ua *UserAccount) error {
		contact, err := c.ks.LoadContact(peerHash)
		if err != nil || contact.IdentityPublicDili == nil || contact.IdentityPublicX25519 == nil {
			return errors.New("–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
		}
		myIDKeyDili, _ := ua.IdentityPublicDili.MarshalBinary()
		myIDKeyEC := ua.IdentityPublicX25519[:]
		theirIDKeyDili, _ := contact.IdentityPublicDili.MarshalBinary()
		theirIDKeyEC := contact.IdentityPublicX25519[:]
		myCombinedID := append(myIDKeyDili, myIDKeyEC...)
		theirCombinedID := append(theirIDKeyDili, theirIDKeyEC...)
		var combined []byte
		if bytes.Compare(myCombinedID, theirCombinedID) < 0 {
			combined = append(myCombinedID, theirCombinedID...)
		} else {
			combined = append(theirCombinedID, myCombinedID...)
		}
		hash := sha512.Sum512_256(combined)
		var safetyNumbers [6]uint64
		for i := 0; i < 6; i++ {
			chunk := hash[i*5 : (i+1)*5]
			paddedChunk := make([]byte, 8)
			copy(paddedChunk[3:], chunk)
			val := binary.BigEndian.Uint64(paddedChunk)
			safetyNumbers[i] = val % 100000
		}
		safetyNumber = fmt.Sprintf("%05d %05d %05d\n   %05d %05d %05d",
			safetyNumbers[0], safetyNumbers[1], safetyNumbers[2],
			safetyNumbers[3], safetyNumbers[4], safetyNumbers[5])
		return nil
	})
	return safetyNumber, err
}

func (c *logicClient) shutdown() {
	c.handler.OnLog(LogLevelInfo, "‚ÑπÔ∏è –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–∞–∫–µ—Ç–æ–≤...")
	c.wg.Wait()
	c.handler.OnLog(LogLevelInfo, "‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–∫–µ—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
}

func truncateHash(hash string) string {
	if len(hash) > 8 {
		return hash[:8]
	}
	return hash
}

// forceConnection –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤.
func forceConnection(conn *grpc.ClientConn, timeout time.Duration, handler CoreEventHandler) error {
	handler.OnLog(LogLevelInfo, fmt.Sprintf("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (—Ç–∞–π–º–∞—É—Ç: %v)", timeout))
	ctx, cancel := context.WithTimeout(context.Background(), timeout)
	defer cancel()

	authClient := proto2.NewAuthClient(conn)
	state := conn.GetState()
	handler.OnLog(LogLevelInfo, fmt.Sprintf("üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: %v", state))

	_, err := authClient.GetPublicSalt(ctx, &proto2.PublicSaltRequest{})
	if err != nil {
		finalState := conn.GetState()
		handler.OnLog(LogLevelError, fmt.Sprintf("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å. –°–æ—Å—Ç–æ—è–Ω–∏–µ: %v ‚Üí %v, –æ—à–∏–±–∫–∞: %v", state, finalState, err))
		return err
	}
	finalState := conn.GetState()
	handler.OnLog(LogLevelInfo, fmt.Sprintf("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞. –°–æ—Å—Ç–æ—è–Ω–∏–µ: %v ‚Üí %v", state, finalState))
	return nil
}

func getHashesFromServerSecurely(myUsername, destUsername string, tlsConfig *tls.Config, handler CoreEventHandler) (string, string, error) {
	maxAttempts := 3
	baseTimeout := 10 * time.Second

	creds := credentials.NewTLS(tlsConfig)

	for attempt := 1; attempt <= maxAttempts; attempt++ {
		timeout := time.Duration(attempt) * baseTimeout
		var conn *grpc.ClientConn
		var err error

		conn, err = grpc.NewClient(
			serverAddress,
			grpc.WithTransportCredentials(creds),
			grpc.WithDefaultCallOptions(grpc.MaxCallRecvMsgSize(1024*1024)),
		)
		if err != nil {
			if attempt == maxAttempts {
				return "", "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ö—ç—à–µ–π –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫: %v", maxAttempts, err)
			}
			handler.OnLog(LogLevelWarning, fmt.Sprintf("–ü–æ–ø—ã—Ç–∫–∞ %d/%d –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: %v", attempt, maxAttempts, err))
			time.Sleep(time.Second * time.Duration(attempt))
			continue
		}

		if err := forceConnection(conn, timeout, handler); err != nil {
			conn.Close()
			if attempt == maxAttempts {
				return "", "", fmt.Errorf("—Ç–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ –ø—Ä–æ—à–µ–ª –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫: %v", maxAttempts, err)
			}
			handler.OnLog(LogLevelWarning, fmt.Sprintf("–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è %d/%d –Ω–µ —É–¥–∞–ª—Å—è: %v", attempt, maxAttempts, err))
			time.Sleep(time.Second * time.Duration(attempt))
			continue
		}

		authClient := proto2.NewAuthClient(conn)
		ctx, cancel := context.WithTimeout(context.Background(), timeout)

		publicSalt := []byte("your-fixed-salt-that-will-be-the-same-every-time")
		myLocalHash := hmac.New(sha256.New, publicSalt)
		myLocalHash.Write([]byte(myUsername))
		destLocalHash := hmac.New(sha256.New, publicSalt)
		destLocalHash.Write([]byte(destUsername))

		myFinalHashResp, err := authClient.GetFinalHash(ctx, &proto2.FinalHashRequest{LocalHash: myLocalHash.Sum(nil)})
		if err != nil {
			cancel()
			conn.Close()
			if attempt == maxAttempts {
				return "", "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ö—ç—à–∞ –¥–ª—è %s –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫: %w", myUsername, maxAttempts, err)
			}
			handler.OnLog(LogLevelWarning, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö—ç—à–∞ –¥–ª—è %s, –ø–æ–ø—ã—Ç–∫–∞ %d/%d: %v", myUsername, attempt, maxAttempts, err))
			time.Sleep(time.Second * time.Duration(attempt))
			continue
		}

		destFinalHashResp, err := authClient.GetFinalHash(ctx, &proto2.FinalHashRequest{LocalHash: destLocalHash.Sum(nil)})
		if err != nil {
			cancel()
			conn.Close()
			if attempt == maxAttempts {
				return "", "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ö—ç—à–∞ –¥–ª—è %s –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫: %w", destUsername, maxAttempts, err)
			}
			handler.OnLog(LogLevelWarning, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö—ç—à–∞ –¥–ª—è %s, –ø–æ–ø—ã—Ç–∫–∞ %d/%d: %v", destUsername, attempt, maxAttempts, err))
			time.Sleep(time.Second * time.Duration(attempt))
			continue
		}

		cancel()
		conn.Close()
		return myFinalHashResp.FinalHash, destFinalHashResp.FinalHash, nil
	}

	return "", "", fmt.Errorf("–≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
}
