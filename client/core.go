// Copyright 2025 snaart
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package phantomcore

import (
	"context"
	"crypto/hmac"
	"crypto/sha256"
	"crypto/tls"
	"encoding/base64"
	"fmt"
	"io"
	"os"
	"path/filepath"
	pb "phantom/proto"
	"strings"
	"sync"
	"time"

	"golang.org/x/crypto/curve25519"
	"google.golang.org/grpc"
)

// LogLevel –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–ª–±—ç–∫–∞ OnLog.
type LogLevel int

const (
	LogLevelInfo LogLevel = iota
	LogLevelWarning
	LogLevelError
	LogLevelCritical
)

// TransportProtocol –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É.
type TransportProtocol int

const (
	Auto TransportProtocol = iota
	TCP
	QUIC
	P2P
	Hybrid
)

// String –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
func (tp TransportProtocol) String() string {
	switch tp {
	case Auto:
		return "Auto"
	case TCP:
		return "TCP"
	case QUIC:
		return "QUIC"
	case P2P:
		return "P2P"
	case Hybrid:
		return "Hybrid"
	default:
		return "Unknown"
	}
}

// ContactInfo —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—É–±–ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI.
type ContactInfo struct {
	Name         string
	Hash         string
	IsOnline     bool
	SessionState string
	IsP2P        bool
	P2PLocation  string
}

// CoreEventHandler ‚Äî —ç—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –æ—Ç —è–¥—Ä–∞.
type CoreEventHandler interface {
	OnMessageReceived(message StoredMessage)
	OnContactListUpdated(contacts []ContactInfo)
	OnSessionEstablished(peerHash string)
	OnLog(level LogLevel, message string)
	OnConnectionStateChanged(state string, err error)
	OnShutdown(message string)
	OnP2PStateChanged(isActive bool, peers []string)
}

// Core ‚Äî —ç—Ç–æ –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É—é—â–∞—è –≤—Å—é –ª–æ–≥–∏–∫—É Phantom.
type Core struct {
	mu              sync.Mutex
	logicClient     *logicClient
	grpcConn        *grpc.ClientConn
	transportCloser io.Closer
	ks              *KeyStore
	ms              *MessageStore
	username        string
	handler         CoreEventHandler
	isStarted       bool
	lastTransport   TransportProtocol
	tlsConfig       *tls.Config
	p2pTransport    *P2PTransport
	useP2P          bool
}

// NewCore —Å–æ–∑–¥–∞–µ—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —è–¥—Ä–∞.
func NewCore(username, pin, basePath string, handler CoreEventHandler) (*Core, error) {
	if handler == nil {
		return nil, fmt.Errorf("–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π (handler) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å nil")
	}

	ks, err := NewKeyStore(filepath.Join(basePath, "keystore.db"))
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è KeyStore: %w", err)
	}
	ms, err := NewMessageStore(filepath.Join(basePath, "messagestore.db"))
	if err != nil {
		err := ks.Close()
		if err != nil {
			return nil, err
		}
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è MessageStore: %w", err)
	}

	if !fileExists(ks.path) {
		if err := ks.Initialize(pin); err != nil {
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ KeyStore: %w", err)
		}
		if err := ms.Initialize(pin); err != nil {
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MessageStore: %w", err)
		}
		handler.OnLog(LogLevelInfo, "‚úÖ –ù–æ–≤—ã–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ–∑–¥–∞–Ω—ã.")

		if err := ks.CreateAccount(username); err != nil {
			return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç: %w", err)
		}
		handler.OnLog(LogLevelInfo, "‚úÖ –ù–æ–≤—ã–π –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω.")

	} else {
		if err := ks.Unlock(pin); err != nil {
			return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å KeyStore: %w", err)
		}
		ms.Unlock(pin)
		handler.OnLog(LogLevelInfo, "‚úÖ –•—Ä–∞–Ω–∏–ª–∏—â–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")

		exists, err := ks.AccountExists(username)
		if err != nil {
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: %w", err)
		}
		if !exists {
			return nil, fmt.Errorf("–∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ", username)
		}
		handler.OnLog(LogLevelInfo, fmt.Sprintf("‚úÖ –ê–∫–∫–∞—É–Ω—Ç –¥–ª—è %s –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.", username))
	}

	p2pTransport, err := NewP2PTransport(handler)
	if err != nil {
		handler.OnLog(LogLevelWarning, fmt.Sprintf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å P2P —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: %v", err))
	}

	return &Core{
		ks:           ks,
		ms:           ms,
		username:     username,
		handler:      handler,
		p2pTransport: p2pTransport,
	}, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç —è–¥—Ä–æ: –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–ª—É—à–∞—Ç—å —Å–æ–±—ã—Ç–∏—è.
func (c *Core) Start(transport TransportProtocol) error {
	c.mu.Lock()
	if c.isStarted {
		c.mu.Unlock()
		return fmt.Errorf("—è–¥—Ä–æ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ")
	}
	c.mu.Unlock()

	c.handler.OnLog(LogLevelInfo, fmt.Sprintf("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º: %s", transport.String()))

	c.useP2P = transport == P2P || transport == Hybrid || transport == Auto

	if transport == P2P {
		return c.startP2POnly()
	}

	tlsConfig, err := loadTLSCredentials(c.handler)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å TLS-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: %w", err)
	}

	logic, err := newLogicClient(c.username, c.ks, c.ms, c.handler)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–ª–∏–µ–Ω—Ç: %w", err)
	}

	var grpcConn *grpc.ClientConn
	var transportCloser io.Closer
	var usedTransport string

	if transport == Hybrid {
		grpcConn, transportCloser, usedTransport, err = tryConnect(Auto, tlsConfig, c.handler)
	} else {
		grpcConn, transportCloser, usedTransport, err = tryConnect(transport, tlsConfig, c.handler)
	}
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: %w", err)
	}
	c.handler.OnLog(LogLevelInfo, fmt.Sprintf("‚úÖ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ %s", usedTransport))

	phantomClient := pb.NewPhantomClient(grpcConn)
	stream, err := phantomClient.Transmit(context.Background())
	if err != nil {
		err := grpcConn.Close()
		if err != nil {
			return err
		}
		if transportCloser != nil {
			err := transportCloser.Close()
			if err != nil {
				return err
			}
		}
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å gRPC-—Å—Ç—Ä–∏–º: %w", err)
	}

	c.mu.Lock()
	c.grpcConn = grpcConn
	c.transportCloser = transportCloser
	c.logicClient = logic
	c.tlsConfig = tlsConfig
	c.mu.Unlock()

	readyChan := make(chan error, 1)
	go c.logicClient.startProcessing(stream, tlsConfig, readyChan)

	if err := <-readyChan; err != nil {
		err := c.Stop()
		if err != nil {
			return err
		}
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ª–æ–≥–∏–∫—É —è–¥—Ä–∞: %w", err)
	}

	if c.useP2P && c.p2pTransport != nil {
		go c.startP2PTransport()
	}

	c.mu.Lock()
	c.isStarted = true
	c.lastTransport = transport
	c.mu.Unlock()

	transportInfo := usedTransport
	if c.useP2P {
		transportInfo += " + P2P"
	}
	c.handler.OnLog(LogLevelInfo, fmt.Sprintf("‚úÖ –Ø–¥—Ä–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: %s", transportInfo))

	return nil
}

// startP2POnly –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ P2P —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –±–µ–∑ —Å–µ—Ä–≤–µ—Ä–∞
func (c *Core) startP2POnly() error {
	c.handler.OnLog(LogLevelInfo, "üåê –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —á–∏—Å—Ç–æ–≥–æ P2P (–±–µ–∑ —Å–µ—Ä–≤–µ—Ä–∞)...")
	myHash := c.calculateLocalHash(c.username)

	logic, err := newLogicClient(c.username, c.ks, c.ms, c.handler)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–ª–∏–µ–Ω—Ç: %w", err)
	}
	logic.myUsernameHash = myHash

	c.mu.Lock()
	c.logicClient = logic
	c.mu.Unlock()

	if c.p2pTransport == nil {
		return fmt.Errorf("P2P —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
	}
	if err := c.p2pTransport.Start(myHash); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å P2P —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: %w", err)
	}

	c.p2pTransport.SetMessageHandler(logic)
	c.p2pTransport.SetCore(c)

	c.loadLocalContactsForP2P()

	go c.monitorP2PStatus()

	c.mu.Lock()
	c.isStarted = true
	c.lastTransport = P2P
	c.mu.Unlock()

	c.handler.OnLog(LogLevelInfo, "‚úÖ –Ø–¥—Ä–æ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ä–µ–∂–∏–º–µ —á–∏—Å—Ç–æ–≥–æ P2P")
	c.handler.OnP2PStateChanged(true, []string{})

	return nil
}

// startP2PTransport –∑–∞–ø—É—Å–∫–∞–µ—Ç P2P —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
func (c *Core) startP2PTransport() {
	if c.p2pTransport == nil || c.logicClient == nil {
		return
	}
	c.handler.OnLog(LogLevelInfo, "üåê –ó–∞–ø—É—Å–∫ P2P —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞...")
	myHash := c.logicClient.myUsernameHash
	if myHash == "" {
		c.handler.OnLog(LogLevelError, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ö—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è P2P")
		return
	}

	if err := c.p2pTransport.Start(myHash); err != nil {
		c.handler.OnLog(LogLevelError, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å P2P: %v", err))
		return
	}

	c.p2pTransport.SetMessageHandler(c.logicClient)
	c.p2pTransport.SetCore(c)
	c.handler.OnP2PStateChanged(true, c.p2pTransport.GetP2PPeers())

	go c.monitorP2PStatus()
}

// monitorP2PStatus –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –∏—â–µ—Ç –æ—Ñ—Ñ–ª–∞–π–Ω-–∫–æ–Ω—Ç–∞–∫—Ç—ã.
func (c *Core) monitorP2PStatus() {
	// –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Å–µ—Ç–∏
	time.Sleep(5 * time.Second)

	ticker := time.NewTicker(20 * time.Second)
	defer ticker.Stop()

	for {
		c.mu.Lock()
		if !c.isStarted || c.p2pTransport == nil {
			c.mu.Unlock()
			return
		}
		p2pTransport := c.p2pTransport
		c.mu.Unlock()

		contacts, err := c.GetContacts()
		if err != nil {
			c.handler.OnLog(LogLevelWarning, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞.")
			<-ticker.C
			continue
		}

		// –î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ñ—Ñ–ª–∞–π–Ω-–∫–æ–Ω—Ç–∞–∫—Ç–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
		for _, contact := range contacts {
			if !p2pTransport.IsP2PAvailable(contact.Hash) {
				c.handler.OnLog(LogLevelInfo, fmt.Sprintf("üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –æ—Ñ—Ñ–ª–∞–π–Ω-–∫–æ–Ω—Ç–∞–∫—Ç–∞ %s (%s...)", contact.Name, truncateHash(contact.Hash)))
				p2pTransport.ForceFindPeer(contact.Hash)
			}
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º UI —Å —Ç–µ–∫—É—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º P2P
		peers := p2pTransport.GetP2PPeers()
		c.handler.OnP2PStateChanged(true, peers)
		c.updateContactsP2PStatus()

		<-ticker.C
	}
}

// updateContactsP2PStatus –æ–±–Ω–æ–≤–ª—è–µ—Ç P2P —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
func (c *Core) updateContactsP2PStatus() {
	contacts, err := c.GetContacts()
	if err != nil {
		return
	}
	if c.p2pTransport == nil {
		return
	}

	c.p2pTransport.peersMu.RLock()
	defer c.p2pTransport.peersMu.RUnlock()

	for i := range contacts {
		hash := contacts[i].Hash
		if c.p2pTransport.IsP2PAvailable(hash) {
			contacts[i].IsP2P = true
			if peerInfo, exists := c.p2pTransport.peers[hash]; exists {
				if peerInfo.IsLocal {
					contacts[i].P2PLocation = "local"
				} else {
					contacts[i].P2PLocation = "global"
				}
			}
		} else {
			contacts[i].IsP2P = false
			contacts[i].P2PLocation = ""
		}
	}

	c.handler.OnContactListUpdated(contacts)
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è–¥—Ä–æ
func (c *Core) Stop() error {
	c.mu.Lock()
	defer c.mu.Unlock()
	if !c.isStarted {
		return nil
	}
	c.handler.OnLog(LogLevelInfo, "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–¥—Ä–∞...")
	if c.p2pTransport != nil {
		err := c.p2pTransport.Stop()
		if err != nil {
			return err
		}
		c.handler.OnP2PStateChanged(false, []string{})
	}
	if c.logicClient != nil {
		c.logicClient.shutdown()
	}
	if c.grpcConn != nil {
		err := c.grpcConn.Close()
		if err != nil {
			return err
		}
	}
	if c.transportCloser != nil {
		err := c.transportCloser.Close()
		if err != nil {
			return err
		}
	}
	if c.ks != nil {
		err := c.ks.Close()
		if err != nil {
			return err
		}
	}
	if c.ms != nil {
		err := c.ms.Close()
		if err != nil {
			return err
		}
	}
	c.isStarted = false
	c.logicClient = nil
	c.grpcConn = nil
	c.transportCloser = nil
	c.tlsConfig = nil
	c.handler.OnLog(LogLevelInfo, "–Ø–¥—Ä–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
	c.handler.OnShutdown("–Ø–¥—Ä–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

	return nil
}

// Restart –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —è–¥—Ä–æ
func (c *Core) Restart(transport TransportProtocol) error {
	c.handler.OnLog(LogLevelInfo, fmt.Sprintf("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —è–¥—Ä–∞ —Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º: %s", transport.String()))
	err := c.Stop()
	if err != nil {
		return err
	}
	time.Sleep(1 * time.Second)
	return c.Start(transport)
}

// GetLastTransport –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
func (c *Core) GetLastTransport() TransportProtocol {
	c.mu.Lock()
	defer c.mu.Unlock()
	return c.lastTransport
}

// GetCurrentTransport –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
func (c *Core) GetCurrentTransport() string {
	c.mu.Lock()
	defer c.mu.Unlock()
	if !c.isStarted {
		return "–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ"
	}
	var transports []string
	if c.grpcConn != nil {
		if c.lastTransport == QUIC {
			transports = append(transports, "QUIC")
		} else if c.lastTransport == TCP {
			transports = append(transports, "TCP")
		} else {
			transports = append(transports, "Server")
		}
	}
	if c.p2pTransport != nil && c.useP2P {
		peers := c.p2pTransport.GetP2PPeers()
		transports = append(transports, fmt.Sprintf("P2P(%d)", len(peers)))
	}
	if len(transports) == 0 {
		return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
	}
	return strings.Join(transports, " + ")
}

// IsConnected –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–æ –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
func (c *Core) IsConnected() bool {
	c.mu.Lock()
	defer c.mu.Unlock()
	serverConnected := c.isStarted && c.logicClient != nil && c.grpcConn != nil
	p2pConnected := c.p2pTransport != nil && c.useP2P && len(c.p2pTransport.GetP2PPeers()) > 0
	return serverConnected || p2pConnected
}

// GetContacts –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.
func (c *Core) GetContacts() ([]ContactInfo, error) {
	usernames, err := c.ks.ListContactUsernames()
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ –ë–î: %w", err)
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º map –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ –∏—Ö —Ö—ç—à—É
	uniqueContacts := make(map[string]ContactInfo)

	for _, name := range usernames {
		var hash string
		if c.logicClient != nil && c.lastTransport != P2P {
			hash = c.logicClient.getHashForUsername(name)
		}
		if hash == "" {
			hash = c.calculateLocalHash(name)
		}

		contact := ContactInfo{Name: name, Hash: hash}
		if c.p2pTransport != nil && c.p2pTransport.IsP2PAvailable(hash) {
			contact.IsP2P = true
			contact.IsOnline = true
			c.p2pTransport.peersMu.RLock()
			if peerInfo, exists := c.p2pTransport.peers[hash]; exists {
				contact.P2PLocation = "global"
				if peerInfo.IsLocal {
					contact.P2PLocation = "local"
				}
			}
			c.p2pTransport.peersMu.RUnlock()
		}
		uniqueContacts[hash] = contact // –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ map
	}

	var contacts []ContactInfo
	for _, contact := range uniqueContacts {
		contacts = append(contacts, contact)
	}

	return contacts, nil
}

// GetHistory –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π.
func (c *Core) GetHistory(peerHash string, limit int) ([]StoredMessage, error) {
	return c.ms.LoadHistory(peerHash, limit)
}

// SendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
func (c *Core) SendMessage(peerHash, text string) error {
	c.mu.Lock()
	defer c.mu.Unlock()
	if !c.isStarted || c.logicClient == nil {
		return fmt.Errorf("—è–¥—Ä–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ")
	}

	if c.useP2P && c.p2pTransport != nil && c.p2pTransport.IsP2PAvailable(peerHash) {
		c.handler.OnLog(LogLevelInfo, fmt.Sprintf("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ P2P –ø–∏—Ä—É %s...", truncateHash(peerHash)))
		err := c.logicClient.sendMessageViaP2P(peerHash, text, c.p2pTransport)
		if err == nil {
			return nil
		}
		c.handler.OnLog(LogLevelWarning, fmt.Sprintf("‚ö†Ô∏è P2P –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: %v. –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä...", err))
	}

	if c.grpcConn != nil {
		return c.logicClient.sendMessage(peerHash, text)
	}
	return fmt.Errorf("–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
}

// StartNewChat –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —á–∞—Ç.
func (c *Core) StartNewChat(peerUsername string) error {
	c.mu.Lock()
	defer c.mu.Unlock()
	if !c.isStarted {
		return fmt.Errorf("—è–¥—Ä–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ")
	}

	if c.lastTransport == P2P {
		peerHash := c.calculateLocalHash(peerUsername)
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç —É–∂–µ
		contacts, _ := c.GetContacts()
		for _, contact := range contacts {
			if contact.Name == peerUsername {
				c.handler.OnLog(LogLevelInfo, fmt.Sprintf("–ö–æ–Ω—Ç–∞–∫—Ç %s —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", peerUsername))
				return nil
			}
		}

		contact := &Contact{Username: peerUsername, UsernameHash: peerHash}
		if err := c.ks.SaveContact(contact); err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç: %w", err)
		}
		c.handler.OnLog(LogLevelInfo, fmt.Sprintf("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç %s –¥–æ–±–∞–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ (P2P)", peerUsername))
		c.loadLocalContacts()

		return nil
	}

	if c.logicClient == nil {
		return fmt.Errorf("–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º")
	}
	return c.logicClient.startNewChat(peerUsername, c.tlsConfig)
}

// GenerateSafetyNumber –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
func (c *Core) GenerateSafetyNumber(peerHash string) (string, error) {
	c.mu.Lock()
	defer c.mu.Unlock()
	if !c.isStarted || c.logicClient == nil {
		return "", fmt.Errorf("—è–¥—Ä–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ")
	}
	return c.logicClient.generateSafetyNumber(peerHash)
}

// ForceContactSync –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã.
func (c *Core) ForceContactSync() {
	c.mu.Lock()
	defer c.mu.Unlock()
	if c.isStarted && c.logicClient != nil && c.grpcConn != nil {
		go c.logicClient.initialContactSync(c.tlsConfig)
	}
	if c.p2pTransport != nil {
		c.updateContactsP2PStatus()
	}
}

// TryReconnect –ø—ã—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è.
func (c *Core) TryReconnect() error {
	c.mu.Lock()
	isStarted := c.isStarted
	lastTransport := c.lastTransport
	c.mu.Unlock()
	if !isStarted {
		return fmt.Errorf("—è–¥—Ä–æ –Ω–µ –±—ã–ª–æ –∑–∞–ø—É—â–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Start() –≤–º–µ—Å—Ç–æ TryReconnect()")
	}
	c.handler.OnLog(LogLevelInfo, "–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
	if err := c.Restart(lastTransport); err != nil {
		if lastTransport != Auto {
			c.handler.OnLog(LogLevelWarning, fmt.Sprintf("–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å %s –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º Auto", lastTransport.String()))
			return c.Restart(Auto)
		}
		return err
	}
	return nil
}

// GetP2PStatus –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å P2P.
func (c *Core) GetP2PStatus() (bool, []string) {
	c.mu.Lock()
	defer c.mu.Unlock()
	if c.p2pTransport == nil || !c.useP2P {
		return false, []string{}
	}
	peers := c.p2pTransport.GetP2PPeers()
	return len(peers) > 0, peers
}

// calculateLocalHash –≤—ã—á–∏—Å–ª—è–µ—Ç —Ö—ç—à –ª–æ–∫–∞–ª—å–Ω–æ.
func (c *Core) calculateLocalHash(username string) string {
	publicSalt := []byte("your-fixed-salt-that-will-be-the-same-every-time")
	localHash := hmac.New(sha256.New, publicSalt)
	localHash.Write([]byte(username))
	return base64.URLEncoding.EncodeToString(localHash.Sum(nil))
}

// calculateP2PHashWithSharedSecret –≤—ã—á–∏—Å–ª—è–µ—Ç P2P —Ö—ç—à —Å –æ–±—â–∏–º —Å–µ–∫—Ä–µ—Ç–æ–º.
func (c *Core) calculateP2PHashWithSharedSecret(contactHash, contactName string) (string, error) {
	var myPrivateKey, theirPublicKey *[32]byte
	err := c.ks.WithUserAccount(c.username, func(ua *UserAccount) error {
		if ua.IdentityPrivateX25519 == nil {
			return fmt.Errorf("–ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á X25519 –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
		}
		myPrivateKey = ua.IdentityPrivateX25519
		return nil
	})
	if err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: %w", err)
	}
	contact, err := c.ks.LoadContact(contactHash)
	if err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç: %w", err)
	}
	if contact.IdentityPublicX25519 == nil {
		return "", fmt.Errorf("–ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á X25519 –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
	}
	theirPublicKey = contact.IdentityPublicX25519
	sharedSecret, err := curve25519.X25519(myPrivateKey[:], theirPublicKey[:])
	if err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –æ–±—â–∏–π —Å–µ–∫—Ä–µ—Ç X25519: %w", err)
	}
	firstRoundHash := c.calculateLocalHash(contactName)
	secondRoundHMAC := hmac.New(sha256.New, sharedSecret[:])
	secondRoundHMAC.Write([]byte(firstRoundHash))
	finalHash := base64.URLEncoding.EncodeToString(secondRoundHMAC.Sum(nil))
	c.handler.OnLog(LogLevelInfo, fmt.Sprintf("üîê –í—ã—á–∏—Å–ª–µ–Ω P2P —Ö—ç—à —Å –æ–±—â–∏–º —Å–µ–∫—Ä–µ—Ç–æ–º –¥–ª—è %s: %s", truncateHash(contactHash), truncateHash(finalHash)))
	return finalHash, nil
}

// loadLocalContacts –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î.
func (c *Core) loadLocalContacts() {
	contacts, err := c.GetContacts()
	if err != nil {
		c.handler.OnLog(LogLevelError, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã: %v", err))
		return
	}
	if c.logicClient != nil {
		c.logicClient.contactsMu.Lock()
		c.logicClient.usernameToHash = make(map[string]string)
		c.logicClient.hashToUsername = make(map[string]string)
		for _, contact := range contacts {
			if contact.Name != "" && contact.Hash != "" {
				c.logicClient.usernameToHash[contact.Name] = contact.Hash
				c.logicClient.hashToUsername[contact.Hash] = contact.Name
			}
		}
		c.logicClient.contactsMu.Unlock()
		c.handler.OnLog(LogLevelInfo, fmt.Sprintf("–°–æ—Å—Ç–æ—è–Ω–∏–µ logicClient –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è %d –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.", len(contacts)))
	}
	c.handler.OnContactListUpdated(contacts)
}

// loadLocalContactsForP2P –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è P2P —Ä–µ–∂–∏–º–∞.
func (c *Core) loadLocalContactsForP2P() {
	contacts, err := c.GetContacts()
	if err != nil {
		c.handler.OnLog(LogLevelError, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã: %v", err))
		return
	}
	if c.logicClient != nil {
		c.logicClient.contactsMu.Lock()
		c.logicClient.usernameToHash = make(map[string]string)
		c.logicClient.hashToUsername = make(map[string]string)
		for _, contact := range contacts {
			c.logicClient.usernameToHash[contact.Name] = contact.Hash
			c.logicClient.hashToUsername[contact.Hash] = contact.Name
		}
		c.logicClient.contactsMu.Unlock()
	}
	c.handler.OnContactListUpdated(contacts)
}

// getP2PHashesForAnnouncement –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ö—ç—à–∏ –¥–ª—è –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è.
func (c *Core) getP2PHashesForAnnouncement() []string {
	c.mu.Lock()
	defer c.mu.Unlock()
	if c.logicClient == nil {
		return []string{}
	}
	var hashesToAnnounce []string
	c.logicClient.contactsMu.RLock()
	for _, standardHash := range c.logicClient.usernameToHash {
		hashesToAnnounce = append(hashesToAnnounce, standardHash)
	}
	c.logicClient.contactsMu.RUnlock()
	if c.logicClient.myUsernameHash != "" {
		hashesToAnnounce = append(hashesToAnnounce, c.logicClient.myUsernameHash)
	}
	uniqueHashes := make(map[string]bool)
	var result []string
	for _, hash := range hashesToAnnounce {
		if !uniqueHashes[hash] {
			uniqueHashes[hash] = true
			result = append(result, hash)
		}
	}
	c.handler.OnLog(LogLevelInfo, fmt.Sprintf("üì¢ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∫ –∞–Ω–æ–Ω—Å—É %d —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ö—ç—à–µ–π.", len(result)))
	return result
}

// fileExists –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª.
func fileExists(path string) bool {
	_, err := os.Stat(path)
	return !os.IsNotExist(err)
}
