// Copyright 2025 snaart
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package phantomcore

import (
	"crypto/tls"
	"crypto/x509"
	"encoding/pem"
	"errors"
	"fmt"
	"io"
	"net"
	"os"
	"strings"
	"time"

	"github.com/quic-go/quic-go"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials"
)

const (
	serverAddress = "{ip_example}"

	// –¢–∞–π–º–∞—É—Ç—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	connectTimeoutTCP  = 10 * time.Second
	connectTimeoutQUIC = 5 * time.Second
)

// quicStreamConn –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è QUIC stream –∫ net.Conn –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É.
type quicStreamConn struct {
	stream     quic.Stream
	localAddr  net.Addr
	remoteAddr net.Addr
}

func (c *quicStreamConn) Read(b []byte) (n int, err error)  { return c.stream.Read(b) }
func (c *quicStreamConn) Write(b []byte) (n int, err error) { return c.stream.Write(b) }
func (c *quicStreamConn) Close() error                      { return c.stream.Close() }
func (c *quicStreamConn) LocalAddr() net.Addr               { return c.localAddr }
func (c *quicStreamConn) RemoteAddr() net.Addr              { return c.remoteAddr }
func (c *quicStreamConn) SetDeadline(t time.Time) error     { return c.stream.SetDeadline(t) }
func (c *quicStreamConn) SetReadDeadline(t time.Time) error { return c.stream.SetReadDeadline(t) }
func (c *quicStreamConn) SetWriteDeadline(t time.Time) error {
	return c.stream.SetWriteDeadline(t)
}

// quicConnCloser ‚Äî —ç—Ç–æ –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è quic.Connection, —Ä–µ–∞–ª–∏–∑—É—é—â–∞—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å io.Closer.
//type quicConnCloser struct {
//	conn quic.Connection
//}
//
//// Close —Ä–µ–∞–ª–∏–∑—É–µ—Ç io.Closer.
//func (q *quicConnCloser) Close() error {
//	return q.conn.CloseWithError(0, "connection closed by client")
//}

// createTCPConnection —Å–æ–∑–¥–∞–µ—Ç –æ–±—ã—á–Ω–æ–µ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
func createTCPConnection(tlsConfig *tls.Config, timeout time.Duration, handler CoreEventHandler) (*grpc.ClientConn, error) {
	handler.OnLog(LogLevelInfo, "üì° [TCP] –ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
	creds := credentials.NewTLS(tlsConfig)

	conn, err := grpc.NewClient(
		serverAddress,
		grpc.WithTransportCredentials(creds),
		grpc.WithDefaultCallOptions(grpc.MaxCallRecvMsgSize(10*1024*1024)),
	)
	if err != nil {
		handler.OnLog(LogLevelError, fmt.Sprintf("‚ùå [TCP] –û—à–∏–±–∫–∞ NewClient: %v", err))
		return nil, fmt.Errorf("—Å–æ–∑–¥–∞–Ω–∏–µ TCP –∫–ª–∏–µ–Ω—Ç–∞: %w", err)
	}

	if err := forceConnection(conn, timeout, handler); err != nil {
		err := conn.Close()
		if err != nil {
			return nil, err
		}
		handler.OnLog(LogLevelError, fmt.Sprintf("‚ùå [TCP] –û—à–∏–±–∫–∞ forceConnection: %v", err))
		return nil, fmt.Errorf("—É—Å—Ç–∞–Ω–æ–≤–∫–∞ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: %w", err)
	}
	handler.OnLog(LogLevelInfo, "‚úÖ [TCP] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ.")
	return conn, nil
}

// createQUICConnection —Å–æ–∑–¥–∞–µ—Ç QUIC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ gRPC –∫–ª–∏–µ–Ω—Ç –ø–æ–≤–µ—Ä—Ö –Ω–µ–≥–æ.
//func createQUICConnection(tlsConfig *tls.Config, timeout time.Duration, handler CoreEventHandler) (*grpc.ClientConn, io.Closer, error) {
//	handler.OnLog(LogLevelInfo, "üöÄ [QUIC] –ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ QUIC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
//	tlsConfig = tlsConfig.Clone()
//	tlsConfig.NextProtos = []string{"h3"}
//	handler.OnLog(LogLevelInfo, fmt.Sprintf("üöÄ [QUIC] TLS Config –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω. ServerName: '%s', NextProtos: %v", tlsConfig.ServerName, tlsConfig.NextProtos))
//
//	quicConfig := &quic.Config{
//		MaxIdleTimeout:       30 * time.Second,
//		KeepAlivePeriod:      10 * time.Second,
//		HandshakeIdleTimeout: 10 * time.Second,
//	}
//
//	ctx, cancel := context.WithTimeout(context.Background(), timeout)
//	defer cancel()
//
//	handler.OnLog(LogLevelInfo, fmt.Sprintf("üöÄ [QUIC] –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞ (DialAddr) %s —Å —Ç–∞–π–º–∞—É—Ç–æ–º %v...", serverAddress, timeout))
//	quicConn, err := quic.DialAddr(ctx, serverAddress, tlsConfig, quicConfig)
//	if err != nil {
//		handler.OnLog(LogLevelError, fmt.Sprintf("‚ùå [QUIC] –û—à–∏–±–∫–∞ DialAddr: %v", err))
//		return nil, nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å QUIC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: %w", err)
//	}
//	handler.OnLog(LogLevelInfo, fmt.Sprintf("‚úÖ [QUIC] DialAddr —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω. RemoteAddr: %s, LocalAddr: %s", quicConn.RemoteAddr(), quicConn.LocalAddr()))
//
//	handler.OnLog(LogLevelInfo, "üöÄ [QUIC] –°–æ–∑–¥–∞–Ω–∏–µ gRPC –∫–ª–∏–µ–Ω—Ç–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –¥–∏–∞–ª–µ—Ä–æ–º...")
//	grpcConn, err := grpc.NewClient(
//		serverAddress,
//		grpc.WithContextDialer(func(ctx context.Context, addr string) (net.Conn, error) {
//			handler.OnLog(LogLevelInfo, "üöÄ [QUIC Dialer] –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–π stream...")
//			stream, err := quicConn.OpenStreamSync(ctx)
//			if err != nil {
//				handler.OnLog(LogLevelError, fmt.Sprintf("‚ùå [QUIC Dialer] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å stream: %v", err))
//				return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å QUIC stream –¥–ª—è gRPC: %w", err)
//			}
//			handler.OnLog(LogLevelInfo, "‚úÖ [QUIC Dialer] Stream —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç.")
//			return &quicStreamConn{
//				stream:     stream,
//				localAddr:  quicConn.LocalAddr(),
//				remoteAddr: quicConn.RemoteAddr(),
//			}, nil
//		}),
//		grpc.WithTransportCredentials(insecure.NewCredentials()),
//		grpc.WithDefaultCallOptions(grpc.MaxCallRecvMsgSize(10*1024*1024)),
//	)
//	if err != nil {
//		handler.OnLog(LogLevelError, fmt.Sprintf("‚ùå [QUIC] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è gRPC –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–≤–µ—Ä—Ö QUIC: %v", err))
//		quicConn.CloseWithError(1, "gRPC setup failed")
//		return nil, nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å gRPC –∫–ª–∏–µ–Ω—Ç —á–µ—Ä–µ–∑ QUIC: %w", err)
//	}
//	handler.OnLog(LogLevelInfo, "‚úÖ [QUIC] gRPC –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
//
//	if err := forceConnection(grpcConn, timeout, handler); err != nil {
//		handler.OnLog(LogLevelError, fmt.Sprintf("‚ùå [QUIC] –¢–µ—Å—Ç–æ–≤—ã–π gRPC –≤—ã–∑–æ–≤ –Ω–µ —É–¥–∞–ª—Å—è: %v", err))
//		grpcConn.Close()
//		quicConn.CloseWithError(1, "gRPC test failed")
//		return nil, nil, fmt.Errorf("—Ç–µ—Å—Ç QUIC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: %w", err)
//	}
//
//	handler.OnLog(LogLevelInfo, "‚úÖ QUIC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
//	return grpcConn, &quicConnCloser{conn: quicConn}, nil
//}

// tryConnect –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, io.Closer –¥–ª—è –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏ –∏–º—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞.
func tryConnect(transport TransportProtocol, tlsConfig *tls.Config, handler CoreEventHandler) (*grpc.ClientConn, io.Closer, string, error) {
	switch transport {
	case TCP:
		handler.OnLog(LogLevelInfo, "üîå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ TCP...")
		conn, err := createTCPConnection(tlsConfig, connectTimeoutTCP, handler)
		if err != nil {
			return nil, nil, "", fmt.Errorf("TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: %w", err)
		}
		return conn, nil, "TCP", nil
	//case QUIC:
	//	handler.OnLog(LogLevelInfo, "üîå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ QUIC...")
	//	conn, quicCloser, err := createQUICConnection(tlsConfig, connectTimeoutQUIC, handler)
	//	if err != nil {
	//		return nil, nil, "", fmt.Errorf("QUIC –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: %w", err)
	//	}
	//	return conn, quicCloser, "QUIC", nil
	case Auto:
		//handler.OnLog(LogLevelInfo, "üîå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: —Å–Ω–∞—á–∞–ª–∞ QUIC, –∑–∞—Ç–µ–º TCP...")
		//conn, quicCloser, err := createQUICConnection(tlsConfig, connectTimeoutQUIC, handler)
		//if err == nil {
		//	handler.OnLog(LogLevelInfo, "‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ —á–µ—Ä–µ–∑ QUIC (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª)")
		//	return conn, quicCloser, "QUIC", nil
		//}
		//handler.OnLog(LogLevelWarning, fmt.Sprintf("‚ö†Ô∏è QUIC –Ω–µ —É–¥–∞–ª—Å—è: %v", err))
		handler.OnLog(LogLevelInfo, "üì° –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª TCP...")
		tcpConn, err := createTCPConnection(tlsConfig, connectTimeoutTCP, handler)
		if err != nil {
			return nil, nil, "", fmt.Errorf("–æ–±–∞ –∫–∞–Ω–∞–ª–∞ –Ω–µ —É–¥–∞–ª–∏—Å—å. QUIC: —Å–º. –≤—ã—à–µ, TCP: %w", err)
		}
		handler.OnLog(LogLevelInfo, "‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ —á–µ—Ä–µ–∑ TCP (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª)")
		return tcpConn, nil, "TCP", nil
	default:
		return nil, nil, "", fmt.Errorf("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª: %v", transport)
	}
}

// loadTLSCredentials –∑–∞–≥—Ä—É–∂–∞–µ—Ç TLS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.
func loadTLSCredentials(handler CoreEventHandler) (*tls.Config, error) {
	handler.OnLog(LogLevelInfo, "üîê [TLS] –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ TLS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...")
	certPath := "server.crt"
	pemServerCA, err := os.ReadFile(certPath)
	if err != nil {
		handler.OnLog(LogLevelWarning, fmt.Sprintf("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –§–∞–π–ª '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω.", certPath))
		handler.OnLog(LogLevelInfo, "   –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä,")
		handler.OnLog(LogLevelInfo, "   —á—Ç–æ–±—ã –æ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —ç—Ç–æ—Ç —Ñ–∞–π–ª, –∞ –∑–∞—Ç–µ–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ")
		handler.OnLog(LogLevelInfo, "   –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –∫–ª–∏–µ–Ω—Ç–æ–º.")
		return nil, fmt.Errorf("—Ñ–∞–π–ª '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω: %w", certPath, err)
	}
	handler.OnLog(LogLevelInfo, fmt.Sprintf("‚úÖ [TLS] –§–∞–π–ª %s –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑–º–µ—Ä: %d –±–∞–π—Ç", certPath, len(pemServerCA)))

	block, _ := pem.Decode(pemServerCA)
	if block == nil {
		handler.OnLog(LogLevelError, "‚ùå [TLS] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å PEM –±–ª–æ–∫ –∏–∑ server.crt")
		return nil, errors.New("–Ω–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å PEM –±–ª–æ–∫")
	}
	cert, err := x509.ParseCertificate(block.Bytes)
	if err != nil {
		handler.OnLog(LogLevelError, fmt.Sprintf("‚ùå [TLS] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: %v", err))
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: %w", err)
	}
	handler.OnLog(LogLevelInfo, "üìã [TLS] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ server.crt:")
	handler.OnLog(LogLevelInfo, fmt.Sprintf("   > Subject: %s", cert.Subject.String()))
	handler.OnLog(LogLevelInfo, fmt.Sprintf("   > Issuer: %s", cert.Issuer.String()))
	handler.OnLog(LogLevelInfo, fmt.Sprintf("   > –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: —Å %v –ø–æ %v", cert.NotBefore, cert.NotAfter))
	handler.OnLog(LogLevelInfo, fmt.Sprintf("   > –ò–º–µ–Ω–∞ DNS: %v", cert.DNSNames))
	handler.OnLog(LogLevelInfo, fmt.Sprintf("   > IP –∞–¥—Ä–µ—Å–∞: %v", cert.IPAddresses))

	certPool := x509.NewCertPool()
	if !certPool.AppendCertsFromPEM(pemServerCA) {
		handler.OnLog(LogLevelError, "‚ùå [TLS] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ –ø—É–ª –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö.")
		return nil, errors.New("–Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ –ø—É–ª")
	}
	handler.OnLog(LogLevelInfo, "‚úÖ [TLS] –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—É–ª –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö.")

	serverName := strings.Split(serverAddress, ":")[0]
	handler.OnLog(LogLevelInfo, fmt.Sprintf("‚ÑπÔ∏è [TLS] –ò–º—è —Ö–æ—Å—Ç–∞ –∏–∑ –∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞: %s", serverName))

	if len(cert.DNSNames) > 0 {
		serverName = cert.DNSNames[0]
		handler.OnLog(LogLevelInfo, fmt.Sprintf("‚ö†Ô∏è [TLS] –í —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ –Ω–∞–π–¥–µ–Ω–æ DNS-–∏–º—è. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ServerName: %s", serverName))
	} else if len(cert.IPAddresses) > 0 {
		foundMatch := false
		for _, ip := range cert.IPAddresses {
			if ip.String() == serverName {
				foundMatch = true
				break
			}
		}
		if !foundMatch {
			handler.OnLog(LogLevelWarning, fmt.Sprintf("‚ö†Ô∏è [TLS] IP-–∞–¥—Ä–µ—Å '%s' –∏–∑ –∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ %v. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π IP –∏–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: %s", serverName, cert.IPAddresses, cert.IPAddresses[0].String()))
			serverName = cert.IPAddresses[0].String()
		}
	} else {
		handler.OnLog(LogLevelWarning, "‚ö†Ô∏è [TLS] –í —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ –Ω–µ—Ç –Ω–∏ DNS-–∏–º–µ–Ω, –Ω–∏ IP-–∞–¥—Ä–µ—Å–æ–≤. –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–Ω–∞–¥—ë–∂–Ω–æ–π.")
	}

	config := &tls.Config{
		RootCAs:            certPool,
		MinVersion:         tls.VersionTLS13,
		ServerName:         serverName,
		InsecureSkipVerify: true,
	}

	handler.OnLog(LogLevelInfo, fmt.Sprintf("‚úÖ [TLS] TLS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ (ServerName: %s, MinVersion: TLS 1.3)", config.ServerName))
	return config, nil
}
