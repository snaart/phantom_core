// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: phantom.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SystemNotification_Type int32

const (
	SystemNotification_UNKNOWN                            SystemNotification_Type = 0
	SystemNotification_OPK_LOW                            SystemNotification_Type = 1
	SystemNotification_REGISTRATION_FAILED_USERNAME_TAKEN SystemNotification_Type = 2
	SystemNotification_USERNAME_REVEAL                    SystemNotification_Type = 3
	SystemNotification_P2P_AVAILABLE                      SystemNotification_Type = 4 // Новое: пир доступен через P2P
	SystemNotification_P2P_PEER_INFO                      SystemNotification_Type = 5 // Новое: информация о P2P пире
)

// Enum value maps for SystemNotification_Type.
var (
	SystemNotification_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "OPK_LOW",
		2: "REGISTRATION_FAILED_USERNAME_TAKEN",
		3: "USERNAME_REVEAL",
		4: "P2P_AVAILABLE",
		5: "P2P_PEER_INFO",
	}
	SystemNotification_Type_value = map[string]int32{
		"UNKNOWN":                            0,
		"OPK_LOW":                            1,
		"REGISTRATION_FAILED_USERNAME_TAKEN": 2,
		"USERNAME_REVEAL":                    3,
		"P2P_AVAILABLE":                      4,
		"P2P_PEER_INFO":                      5,
	}
)

func (x SystemNotification_Type) Enum() *SystemNotification_Type {
	p := new(SystemNotification_Type)
	*p = x
	return p
}

func (x SystemNotification_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SystemNotification_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_phantom_proto_enumTypes[0].Descriptor()
}

func (SystemNotification_Type) Type() protoreflect.EnumType {
	return &file_phantom_proto_enumTypes[0]
}

func (x SystemNotification_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SystemNotification_Type.Descriptor instead.
func (SystemNotification_Type) EnumDescriptor() ([]byte, []int) {
	return file_phantom_proto_rawDescGZIP(), []int{7, 0}
}

// Контейнер верхнего уровня для всех типов сообщений
type Packet struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	SourceClientIdHash      string                 `protobuf:"bytes,1,opt,name=source_client_id_hash,json=sourceClientIdHash,proto3" json:"source_client_id_hash,omitempty"`
	DestinationClientIdHash string                 `protobuf:"bytes,2,opt,name=destination_client_id_hash,json=destinationClientIdHash,proto3" json:"destination_client_id_hash,omitempty"`
	Signature               []byte                 `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"` // Подпись Dilithium5
	// Types that are valid to be assigned to Payload:
	//
	//	*Packet_RegistrationRequest
	//	*Packet_EncryptedMessage
	//	*Packet_KeyRequest
	//	*Packet_KeyResponse
	//	*Packet_SystemNotification
	//	*Packet_P2PUpdate
	Payload       isPacket_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Packet) Reset() {
	*x = Packet{}
	mi := &file_phantom_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Packet) ProtoMessage() {}

func (x *Packet) ProtoReflect() protoreflect.Message {
	mi := &file_phantom_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Packet.ProtoReflect.Descriptor instead.
func (*Packet) Descriptor() ([]byte, []int) {
	return file_phantom_proto_rawDescGZIP(), []int{0}
}

func (x *Packet) GetSourceClientIdHash() string {
	if x != nil {
		return x.SourceClientIdHash
	}
	return ""
}

func (x *Packet) GetDestinationClientIdHash() string {
	if x != nil {
		return x.DestinationClientIdHash
	}
	return ""
}

func (x *Packet) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Packet) GetPayload() isPacket_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Packet) GetRegistrationRequest() *RegistrationRequest {
	if x != nil {
		if x, ok := x.Payload.(*Packet_RegistrationRequest); ok {
			return x.RegistrationRequest
		}
	}
	return nil
}

func (x *Packet) GetEncryptedMessage() *EncryptedMessage {
	if x != nil {
		if x, ok := x.Payload.(*Packet_EncryptedMessage); ok {
			return x.EncryptedMessage
		}
	}
	return nil
}

func (x *Packet) GetKeyRequest() *KeyRequest {
	if x != nil {
		if x, ok := x.Payload.(*Packet_KeyRequest); ok {
			return x.KeyRequest
		}
	}
	return nil
}

func (x *Packet) GetKeyResponse() *KeyResponse {
	if x != nil {
		if x, ok := x.Payload.(*Packet_KeyResponse); ok {
			return x.KeyResponse
		}
	}
	return nil
}

func (x *Packet) GetSystemNotification() *SystemNotification {
	if x != nil {
		if x, ok := x.Payload.(*Packet_SystemNotification); ok {
			return x.SystemNotification
		}
	}
	return nil
}

func (x *Packet) GetP2PUpdate() *P2PUpdate {
	if x != nil {
		if x, ok := x.Payload.(*Packet_P2PUpdate); ok {
			return x.P2PUpdate
		}
	}
	return nil
}

type isPacket_Payload interface {
	isPacket_Payload()
}

type Packet_RegistrationRequest struct {
	RegistrationRequest *RegistrationRequest `protobuf:"bytes,4,opt,name=registration_request,json=registrationRequest,proto3,oneof"`
}

type Packet_EncryptedMessage struct {
	EncryptedMessage *EncryptedMessage `protobuf:"bytes,7,opt,name=encrypted_message,json=encryptedMessage,proto3,oneof"`
}

type Packet_KeyRequest struct {
	KeyRequest *KeyRequest `protobuf:"bytes,8,opt,name=key_request,json=keyRequest,proto3,oneof"`
}

type Packet_KeyResponse struct {
	KeyResponse *KeyResponse `protobuf:"bytes,9,opt,name=key_response,json=keyResponse,proto3,oneof"`
}

type Packet_SystemNotification struct {
	SystemNotification *SystemNotification `protobuf:"bytes,10,opt,name=system_notification,json=systemNotification,proto3,oneof"`
}

type Packet_P2PUpdate struct {
	P2PUpdate *P2PUpdate `protobuf:"bytes,11,opt,name=p2p_update,json=p2pUpdate,proto3,oneof"` // Новое: обновление P2P информации
}

func (*Packet_RegistrationRequest) isPacket_Payload() {}

func (*Packet_EncryptedMessage) isPacket_Payload() {}

func (*Packet_KeyRequest) isPacket_Payload() {}

func (*Packet_KeyResponse) isPacket_Payload() {}

func (*Packet_SystemNotification) isPacket_Payload() {}

func (*Packet_P2PUpdate) isPacket_Payload() {}

type RegistrationRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	HybridPrekeyBundle []byte                 `protobuf:"bytes,1,opt,name=hybrid_prekey_bundle,json=hybridPrekeyBundle,proto3" json:"hybrid_prekey_bundle,omitempty"`
	P2PInfo            *P2PInfo               `protobuf:"bytes,2,opt,name=p2p_info,json=p2pInfo,proto3" json:"p2p_info,omitempty"` // Новое: P2P информация при регистрации
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *RegistrationRequest) Reset() {
	*x = RegistrationRequest{}
	mi := &file_phantom_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationRequest) ProtoMessage() {}

func (x *RegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_phantom_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationRequest.ProtoReflect.Descriptor instead.
func (*RegistrationRequest) Descriptor() ([]byte, []int) {
	return file_phantom_proto_rawDescGZIP(), []int{1}
}

func (x *RegistrationRequest) GetHybridPrekeyBundle() []byte {
	if x != nil {
		return x.HybridPrekeyBundle
	}
	return nil
}

func (x *RegistrationRequest) GetP2PInfo() *P2PInfo {
	if x != nil {
		return x.P2PInfo
	}
	return nil
}

type HybridPreKeyBundle struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// --- PQC Ключи ---
	IdentityKeyDilithium []byte            `protobuf:"bytes,1,opt,name=identity_key_dilithium,json=identityKeyDilithium,proto3" json:"identity_key_dilithium,omitempty"`
	IdentityKeyKyber     []byte            `protobuf:"bytes,2,opt,name=identity_key_kyber,json=identityKeyKyber,proto3" json:"identity_key_kyber,omitempty"`
	SignedPrekeyKyber    []byte            `protobuf:"bytes,3,opt,name=signed_prekey_kyber,json=signedPrekeyKyber,proto3" json:"signed_prekey_kyber,omitempty"`
	OneTimePrekeysKyber  map[uint32][]byte `protobuf:"bytes,5,rep,name=one_time_prekeys_kyber,json=oneTimePrekeysKyber,proto3" json:"one_time_prekeys_kyber,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// --- Классические Ключи (X25519) ---
	IdentityKeyX25519    []byte            `protobuf:"bytes,6,opt,name=identity_key_x25519,json=identityKeyX25519,proto3" json:"identity_key_x25519,omitempty"`
	SignedPrekeyX25519   []byte            `protobuf:"bytes,7,opt,name=signed_prekey_x25519,json=signedPrekeyX25519,proto3" json:"signed_prekey_x25519,omitempty"`
	OneTimePrekeysX25519 map[uint32][]byte `protobuf:"bytes,8,rep,name=one_time_prekeys_x25519,json=oneTimePrekeysX25519,proto3" json:"one_time_prekeys_x25519,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// --- Подпись (Dilithium) теперь покрывает ОБА signed prekey (Kyber + X25519) ---
	PrekeySignatureDilithium []byte `protobuf:"bytes,4,opt,name=prekey_signature_dilithium,json=prekeySignatureDilithium,proto3" json:"prekey_signature_dilithium,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *HybridPreKeyBundle) Reset() {
	*x = HybridPreKeyBundle{}
	mi := &file_phantom_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HybridPreKeyBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridPreKeyBundle) ProtoMessage() {}

func (x *HybridPreKeyBundle) ProtoReflect() protoreflect.Message {
	mi := &file_phantom_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridPreKeyBundle.ProtoReflect.Descriptor instead.
func (*HybridPreKeyBundle) Descriptor() ([]byte, []int) {
	return file_phantom_proto_rawDescGZIP(), []int{2}
}

func (x *HybridPreKeyBundle) GetIdentityKeyDilithium() []byte {
	if x != nil {
		return x.IdentityKeyDilithium
	}
	return nil
}

func (x *HybridPreKeyBundle) GetIdentityKeyKyber() []byte {
	if x != nil {
		return x.IdentityKeyKyber
	}
	return nil
}

func (x *HybridPreKeyBundle) GetSignedPrekeyKyber() []byte {
	if x != nil {
		return x.SignedPrekeyKyber
	}
	return nil
}

func (x *HybridPreKeyBundle) GetOneTimePrekeysKyber() map[uint32][]byte {
	if x != nil {
		return x.OneTimePrekeysKyber
	}
	return nil
}

func (x *HybridPreKeyBundle) GetIdentityKeyX25519() []byte {
	if x != nil {
		return x.IdentityKeyX25519
	}
	return nil
}

func (x *HybridPreKeyBundle) GetSignedPrekeyX25519() []byte {
	if x != nil {
		return x.SignedPrekeyX25519
	}
	return nil
}

func (x *HybridPreKeyBundle) GetOneTimePrekeysX25519() map[uint32][]byte {
	if x != nil {
		return x.OneTimePrekeysX25519
	}
	return nil
}

func (x *HybridPreKeyBundle) GetPrekeySignatureDilithium() []byte {
	if x != nil {
		return x.PrekeySignatureDilithium
	}
	return nil
}

type KeyRequest struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	RequestedClientIdHash string                 `protobuf:"bytes,1,opt,name=requested_client_id_hash,json=requestedClientIdHash,proto3" json:"requested_client_id_hash,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *KeyRequest) Reset() {
	*x = KeyRequest{}
	mi := &file_phantom_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyRequest) ProtoMessage() {}

func (x *KeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_phantom_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyRequest.ProtoReflect.Descriptor instead.
func (*KeyRequest) Descriptor() ([]byte, []int) {
	return file_phantom_proto_rawDescGZIP(), []int{3}
}

func (x *KeyRequest) GetRequestedClientIdHash() string {
	if x != nil {
		return x.RequestedClientIdHash
	}
	return ""
}

type KeyResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	HybridPrekeyBundle  []byte                 `protobuf:"bytes,1,opt,name=hybrid_prekey_bundle,json=hybridPrekeyBundle,proto3" json:"hybrid_prekey_bundle,omitempty"`
	ClientIdHash        string                 `protobuf:"bytes,2,opt,name=client_id_hash,json=clientIdHash,proto3" json:"client_id_hash,omitempty"`
	OneTimePrekeyKyber  []byte                 `protobuf:"bytes,3,opt,name=one_time_prekey_kyber,json=oneTimePrekeyKyber,proto3" json:"one_time_prekey_kyber,omitempty"`
	OneTimePrekeyX25519 []byte                 `protobuf:"bytes,6,opt,name=one_time_prekey_x25519,json=oneTimePrekeyX25519,proto3" json:"one_time_prekey_x25519,omitempty"`
	OneTimePrekeyId     uint32                 `protobuf:"varint,4,opt,name=one_time_prekey_id,json=oneTimePrekeyId,proto3" json:"one_time_prekey_id,omitempty"`
	ServerSignature     []byte                 `protobuf:"bytes,5,opt,name=server_signature,json=serverSignature,proto3" json:"server_signature,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *KeyResponse) Reset() {
	*x = KeyResponse{}
	mi := &file_phantom_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyResponse) ProtoMessage() {}

func (x *KeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_phantom_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyResponse.ProtoReflect.Descriptor instead.
func (*KeyResponse) Descriptor() ([]byte, []int) {
	return file_phantom_proto_rawDescGZIP(), []int{4}
}

func (x *KeyResponse) GetHybridPrekeyBundle() []byte {
	if x != nil {
		return x.HybridPrekeyBundle
	}
	return nil
}

func (x *KeyResponse) GetClientIdHash() string {
	if x != nil {
		return x.ClientIdHash
	}
	return ""
}

func (x *KeyResponse) GetOneTimePrekeyKyber() []byte {
	if x != nil {
		return x.OneTimePrekeyKyber
	}
	return nil
}

func (x *KeyResponse) GetOneTimePrekeyX25519() []byte {
	if x != nil {
		return x.OneTimePrekeyX25519
	}
	return nil
}

func (x *KeyResponse) GetOneTimePrekeyId() uint32 {
	if x != nil {
		return x.OneTimePrekeyId
	}
	return 0
}

func (x *KeyResponse) GetServerSignature() []byte {
	if x != nil {
		return x.ServerSignature
	}
	return nil
}

// P2P информация о клиенте
type P2PInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PeerId        string                 `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`                    // libp2p peer ID
	Addresses     []string               `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty"`                            // multiaddr список
	PreferP2P     bool                   `protobuf:"varint,3,opt,name=prefer_p2p,json=preferP2p,proto3" json:"prefer_p2p,omitempty"`          // Предпочитает P2P
	RelayWilling  bool                   `protobuf:"varint,4,opt,name=relay_willing,json=relayWilling,proto3" json:"relay_willing,omitempty"` // Готов быть relay
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *P2PInfo) Reset() {
	*x = P2PInfo{}
	mi := &file_phantom_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *P2PInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PInfo) ProtoMessage() {}

func (x *P2PInfo) ProtoReflect() protoreflect.Message {
	mi := &file_phantom_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PInfo.ProtoReflect.Descriptor instead.
func (*P2PInfo) Descriptor() ([]byte, []int) {
	return file_phantom_proto_rawDescGZIP(), []int{5}
}

func (x *P2PInfo) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

func (x *P2PInfo) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *P2PInfo) GetPreferP2P() bool {
	if x != nil {
		return x.PreferP2P
	}
	return false
}

func (x *P2PInfo) GetRelayWilling() bool {
	if x != nil {
		return x.RelayWilling
	}
	return false
}

// Обновление P2P информации
type P2PUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addresses     []string               `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`                            // Обновленные адреса
	RelayWilling  bool                   `protobuf:"varint,2,opt,name=relay_willing,json=relayWilling,proto3" json:"relay_willing,omitempty"` // Статус relay
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *P2PUpdate) Reset() {
	*x = P2PUpdate{}
	mi := &file_phantom_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *P2PUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PUpdate) ProtoMessage() {}

func (x *P2PUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_phantom_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PUpdate.ProtoReflect.Descriptor instead.
func (*P2PUpdate) Descriptor() ([]byte, []int) {
	return file_phantom_proto_rawDescGZIP(), []int{6}
}

func (x *P2PUpdate) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *P2PUpdate) GetRelayWilling() bool {
	if x != nil {
		return x.RelayWilling
	}
	return false
}

type SystemNotification struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Type          SystemNotification_Type `protobuf:"varint,1,opt,name=type,proto3,enum=proto.SystemNotification_Type" json:"type,omitempty"`
	Message       string                  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	P2PInfo       *P2PInfo                `protobuf:"bytes,3,opt,name=p2p_info,json=p2pInfo,proto3" json:"p2p_info,omitempty"` // Новое: P2P информация в уведомлении
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SystemNotification) Reset() {
	*x = SystemNotification{}
	mi := &file_phantom_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemNotification) ProtoMessage() {}

func (x *SystemNotification) ProtoReflect() protoreflect.Message {
	mi := &file_phantom_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemNotification.ProtoReflect.Descriptor instead.
func (*SystemNotification) Descriptor() ([]byte, []int) {
	return file_phantom_proto_rawDescGZIP(), []int{7}
}

func (x *SystemNotification) GetType() SystemNotification_Type {
	if x != nil {
		return x.Type
	}
	return SystemNotification_UNKNOWN
}

func (x *SystemNotification) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SystemNotification) GetP2PInfo() *P2PInfo {
	if x != nil {
		return x.P2PInfo
	}
	return nil
}

type EncryptedMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RatchetHeader []byte                 `protobuf:"bytes,1,opt,name=ratchet_header,json=ratchetHeader,proto3" json:"ratchet_header,omitempty"`
	Ciphertext    []byte                 `protobuf:"bytes,2,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	Timestamp     int64                  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncryptedMessage) Reset() {
	*x = EncryptedMessage{}
	mi := &file_phantom_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncryptedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedMessage) ProtoMessage() {}

func (x *EncryptedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_phantom_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedMessage.ProtoReflect.Descriptor instead.
func (*EncryptedMessage) Descriptor() ([]byte, []int) {
	return file_phantom_proto_rawDescGZIP(), []int{8}
}

func (x *EncryptedMessage) GetRatchetHeader() []byte {
	if x != nil {
		return x.RatchetHeader
	}
	return nil
}

func (x *EncryptedMessage) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

func (x *EncryptedMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// RPC для получения публичной соли
type PublicSaltRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublicSaltRequest) Reset() {
	*x = PublicSaltRequest{}
	mi := &file_phantom_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublicSaltRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicSaltRequest) ProtoMessage() {}

func (x *PublicSaltRequest) ProtoReflect() protoreflect.Message {
	mi := &file_phantom_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicSaltRequest.ProtoReflect.Descriptor instead.
func (*PublicSaltRequest) Descriptor() ([]byte, []int) {
	return file_phantom_proto_rawDescGZIP(), []int{9}
}

type PublicSaltResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PublicSalt    []byte                 `protobuf:"bytes,1,opt,name=public_salt,json=publicSalt,proto3" json:"public_salt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublicSaltResponse) Reset() {
	*x = PublicSaltResponse{}
	mi := &file_phantom_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublicSaltResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicSaltResponse) ProtoMessage() {}

func (x *PublicSaltResponse) ProtoReflect() protoreflect.Message {
	mi := &file_phantom_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicSaltResponse.ProtoReflect.Descriptor instead.
func (*PublicSaltResponse) Descriptor() ([]byte, []int) {
	return file_phantom_proto_rawDescGZIP(), []int{10}
}

func (x *PublicSaltResponse) GetPublicSalt() []byte {
	if x != nil {
		return x.PublicSalt
	}
	return nil
}

// RPC для получения финального хэша
type FinalHashRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LocalHash     []byte                 `protobuf:"bytes,1,opt,name=local_hash,json=localHash,proto3" json:"local_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FinalHashRequest) Reset() {
	*x = FinalHashRequest{}
	mi := &file_phantom_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalHashRequest) ProtoMessage() {}

func (x *FinalHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_phantom_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalHashRequest.ProtoReflect.Descriptor instead.
func (*FinalHashRequest) Descriptor() ([]byte, []int) {
	return file_phantom_proto_rawDescGZIP(), []int{11}
}

func (x *FinalHashRequest) GetLocalHash() []byte {
	if x != nil {
		return x.LocalHash
	}
	return nil
}

type FinalHashResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FinalHash     string                 `protobuf:"bytes,1,opt,name=final_hash,json=finalHash,proto3" json:"final_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FinalHashResponse) Reset() {
	*x = FinalHashResponse{}
	mi := &file_phantom_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalHashResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalHashResponse) ProtoMessage() {}

func (x *FinalHashResponse) ProtoReflect() protoreflect.Message {
	mi := &file_phantom_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalHashResponse.ProtoReflect.Descriptor instead.
func (*FinalHashResponse) Descriptor() ([]byte, []int) {
	return file_phantom_proto_rawDescGZIP(), []int{12}
}

func (x *FinalHashResponse) GetFinalHash() string {
	if x != nil {
		return x.FinalHash
	}
	return ""
}

// Новые сообщения для P2P поддержки
type P2PInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientIdHash  string                 `protobuf:"bytes,1,opt,name=client_id_hash,json=clientIdHash,proto3" json:"client_id_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *P2PInfoRequest) Reset() {
	*x = P2PInfoRequest{}
	mi := &file_phantom_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *P2PInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PInfoRequest) ProtoMessage() {}

func (x *P2PInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_phantom_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PInfoRequest.ProtoReflect.Descriptor instead.
func (*P2PInfoRequest) Descriptor() ([]byte, []int) {
	return file_phantom_proto_rawDescGZIP(), []int{13}
}

func (x *P2PInfoRequest) GetClientIdHash() string {
	if x != nil {
		return x.ClientIdHash
	}
	return ""
}

type P2PInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Available     bool                   `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	PeerId        string                 `protobuf:"bytes,2,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Addresses     []string               `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses,omitempty"`
	PreferP2P     bool                   `protobuf:"varint,4,opt,name=prefer_p2p,json=preferP2p,proto3" json:"prefer_p2p,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *P2PInfoResponse) Reset() {
	*x = P2PInfoResponse{}
	mi := &file_phantom_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *P2PInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PInfoResponse) ProtoMessage() {}

func (x *P2PInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_phantom_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PInfoResponse.ProtoReflect.Descriptor instead.
func (*P2PInfoResponse) Descriptor() ([]byte, []int) {
	return file_phantom_proto_rawDescGZIP(), []int{14}
}

func (x *P2PInfoResponse) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *P2PInfoResponse) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

func (x *P2PInfoResponse) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *P2PInfoResponse) GetPreferP2P() bool {
	if x != nil {
		return x.PreferP2P
	}
	return false
}

type P2PUpdateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientIdHash  string                 `protobuf:"bytes,1,opt,name=client_id_hash,json=clientIdHash,proto3" json:"client_id_hash,omitempty"`
	PeerId        string                 `protobuf:"bytes,2,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Addresses     []string               `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses,omitempty"`
	PreferP2P     bool                   `protobuf:"varint,4,opt,name=prefer_p2p,json=preferP2p,proto3" json:"prefer_p2p,omitempty"`
	RelayWilling  bool                   `protobuf:"varint,5,opt,name=relay_willing,json=relayWilling,proto3" json:"relay_willing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *P2PUpdateRequest) Reset() {
	*x = P2PUpdateRequest{}
	mi := &file_phantom_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *P2PUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PUpdateRequest) ProtoMessage() {}

func (x *P2PUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_phantom_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PUpdateRequest.ProtoReflect.Descriptor instead.
func (*P2PUpdateRequest) Descriptor() ([]byte, []int) {
	return file_phantom_proto_rawDescGZIP(), []int{15}
}

func (x *P2PUpdateRequest) GetClientIdHash() string {
	if x != nil {
		return x.ClientIdHash
	}
	return ""
}

func (x *P2PUpdateRequest) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

func (x *P2PUpdateRequest) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *P2PUpdateRequest) GetPreferP2P() bool {
	if x != nil {
		return x.PreferP2P
	}
	return false
}

func (x *P2PUpdateRequest) GetRelayWilling() bool {
	if x != nil {
		return x.RelayWilling
	}
	return false
}

type P2PUpdateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *P2PUpdateResponse) Reset() {
	*x = P2PUpdateResponse{}
	mi := &file_phantom_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *P2PUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PUpdateResponse) ProtoMessage() {}

func (x *P2PUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_phantom_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PUpdateResponse.ProtoReflect.Descriptor instead.
func (*P2PUpdateResponse) Descriptor() ([]byte, []int) {
	return file_phantom_proto_rawDescGZIP(), []int{16}
}

func (x *P2PUpdateResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_phantom_proto protoreflect.FileDescriptor

const file_phantom_proto_rawDesc = "" +
	"\n" +
	"\rphantom.proto\x12\x05proto\"\xaa\x04\n" +
	"\x06Packet\x121\n" +
	"\x15source_client_id_hash\x18\x01 \x01(\tR\x12sourceClientIdHash\x12;\n" +
	"\x1adestination_client_id_hash\x18\x02 \x01(\tR\x17destinationClientIdHash\x12\x1c\n" +
	"\tsignature\x18\x03 \x01(\fR\tsignature\x12O\n" +
	"\x14registration_request\x18\x04 \x01(\v2\x1a.proto.RegistrationRequestH\x00R\x13registrationRequest\x12F\n" +
	"\x11encrypted_message\x18\a \x01(\v2\x17.proto.EncryptedMessageH\x00R\x10encryptedMessage\x124\n" +
	"\vkey_request\x18\b \x01(\v2\x11.proto.KeyRequestH\x00R\n" +
	"keyRequest\x127\n" +
	"\fkey_response\x18\t \x01(\v2\x12.proto.KeyResponseH\x00R\vkeyResponse\x12L\n" +
	"\x13system_notification\x18\n" +
	" \x01(\v2\x19.proto.SystemNotificationH\x00R\x12systemNotification\x121\n" +
	"\n" +
	"p2p_update\x18\v \x01(\v2\x10.proto.P2PUpdateH\x00R\tp2pUpdateB\t\n" +
	"\apayload\"r\n" +
	"\x13RegistrationRequest\x120\n" +
	"\x14hybrid_prekey_bundle\x18\x01 \x01(\fR\x12hybridPrekeyBundle\x12)\n" +
	"\bp2p_info\x18\x02 \x01(\v2\x0e.proto.P2PInfoR\ap2pInfo\"\xae\x05\n" +
	"\x12HybridPreKeyBundle\x124\n" +
	"\x16identity_key_dilithium\x18\x01 \x01(\fR\x14identityKeyDilithium\x12,\n" +
	"\x12identity_key_kyber\x18\x02 \x01(\fR\x10identityKeyKyber\x12.\n" +
	"\x13signed_prekey_kyber\x18\x03 \x01(\fR\x11signedPrekeyKyber\x12g\n" +
	"\x16one_time_prekeys_kyber\x18\x05 \x03(\v22.proto.HybridPreKeyBundle.OneTimePrekeysKyberEntryR\x13oneTimePrekeysKyber\x12.\n" +
	"\x13identity_key_x25519\x18\x06 \x01(\fR\x11identityKeyX25519\x120\n" +
	"\x14signed_prekey_x25519\x18\a \x01(\fR\x12signedPrekeyX25519\x12j\n" +
	"\x17one_time_prekeys_x25519\x18\b \x03(\v23.proto.HybridPreKeyBundle.OneTimePrekeysX25519EntryR\x14oneTimePrekeysX25519\x12<\n" +
	"\x1aprekey_signature_dilithium\x18\x04 \x01(\fR\x18prekeySignatureDilithium\x1aF\n" +
	"\x18OneTimePrekeysKyberEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\x1aG\n" +
	"\x19OneTimePrekeysX25519Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\"E\n" +
	"\n" +
	"KeyRequest\x127\n" +
	"\x18requested_client_id_hash\x18\x01 \x01(\tR\x15requestedClientIdHash\"\xa5\x02\n" +
	"\vKeyResponse\x120\n" +
	"\x14hybrid_prekey_bundle\x18\x01 \x01(\fR\x12hybridPrekeyBundle\x12$\n" +
	"\x0eclient_id_hash\x18\x02 \x01(\tR\fclientIdHash\x121\n" +
	"\x15one_time_prekey_kyber\x18\x03 \x01(\fR\x12oneTimePrekeyKyber\x123\n" +
	"\x16one_time_prekey_x25519\x18\x06 \x01(\fR\x13oneTimePrekeyX25519\x12+\n" +
	"\x12one_time_prekey_id\x18\x04 \x01(\rR\x0foneTimePrekeyId\x12)\n" +
	"\x10server_signature\x18\x05 \x01(\fR\x0fserverSignature\"\x84\x01\n" +
	"\aP2PInfo\x12\x17\n" +
	"\apeer_id\x18\x01 \x01(\tR\x06peerId\x12\x1c\n" +
	"\taddresses\x18\x02 \x03(\tR\taddresses\x12\x1d\n" +
	"\n" +
	"prefer_p2p\x18\x03 \x01(\bR\tpreferP2p\x12#\n" +
	"\rrelay_willing\x18\x04 \x01(\bR\frelayWilling\"N\n" +
	"\tP2PUpdate\x12\x1c\n" +
	"\taddresses\x18\x01 \x03(\tR\taddresses\x12#\n" +
	"\rrelay_willing\x18\x02 \x01(\bR\frelayWilling\"\x93\x02\n" +
	"\x12SystemNotification\x122\n" +
	"\x04type\x18\x01 \x01(\x0e2\x1e.proto.SystemNotification.TypeR\x04type\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12)\n" +
	"\bp2p_info\x18\x03 \x01(\v2\x0e.proto.P2PInfoR\ap2pInfo\"\x83\x01\n" +
	"\x04Type\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\v\n" +
	"\aOPK_LOW\x10\x01\x12&\n" +
	"\"REGISTRATION_FAILED_USERNAME_TAKEN\x10\x02\x12\x13\n" +
	"\x0fUSERNAME_REVEAL\x10\x03\x12\x11\n" +
	"\rP2P_AVAILABLE\x10\x04\x12\x11\n" +
	"\rP2P_PEER_INFO\x10\x05\"w\n" +
	"\x10EncryptedMessage\x12%\n" +
	"\x0eratchet_header\x18\x01 \x01(\fR\rratchetHeader\x12\x1e\n" +
	"\n" +
	"ciphertext\x18\x02 \x01(\fR\n" +
	"ciphertext\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\"\x13\n" +
	"\x11PublicSaltRequest\"5\n" +
	"\x12PublicSaltResponse\x12\x1f\n" +
	"\vpublic_salt\x18\x01 \x01(\fR\n" +
	"publicSalt\"1\n" +
	"\x10FinalHashRequest\x12\x1d\n" +
	"\n" +
	"local_hash\x18\x01 \x01(\fR\tlocalHash\"2\n" +
	"\x11FinalHashResponse\x12\x1d\n" +
	"\n" +
	"final_hash\x18\x01 \x01(\tR\tfinalHash\"6\n" +
	"\x0eP2PInfoRequest\x12$\n" +
	"\x0eclient_id_hash\x18\x01 \x01(\tR\fclientIdHash\"\x85\x01\n" +
	"\x0fP2PInfoResponse\x12\x1c\n" +
	"\tavailable\x18\x01 \x01(\bR\tavailable\x12\x17\n" +
	"\apeer_id\x18\x02 \x01(\tR\x06peerId\x12\x1c\n" +
	"\taddresses\x18\x03 \x03(\tR\taddresses\x12\x1d\n" +
	"\n" +
	"prefer_p2p\x18\x04 \x01(\bR\tpreferP2p\"\xb3\x01\n" +
	"\x10P2PUpdateRequest\x12$\n" +
	"\x0eclient_id_hash\x18\x01 \x01(\tR\fclientIdHash\x12\x17\n" +
	"\apeer_id\x18\x02 \x01(\tR\x06peerId\x12\x1c\n" +
	"\taddresses\x18\x03 \x03(\tR\taddresses\x12\x1d\n" +
	"\n" +
	"prefer_p2p\x18\x04 \x01(\bR\tpreferP2p\x12#\n" +
	"\rrelay_willing\x18\x05 \x01(\bR\frelayWilling\"-\n" +
	"\x11P2PUpdateResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess2\x90\x02\n" +
	"\x04Auth\x12D\n" +
	"\rGetPublicSalt\x12\x18.proto.PublicSaltRequest\x1a\x19.proto.PublicSaltResponse\x12A\n" +
	"\fGetFinalHash\x12\x17.proto.FinalHashRequest\x1a\x18.proto.FinalHashResponse\x12;\n" +
	"\n" +
	"GetP2PInfo\x12\x15.proto.P2PInfoRequest\x1a\x16.proto.P2PInfoResponse\x12B\n" +
	"\rUpdateP2PInfo\x12\x17.proto.P2PUpdateRequest\x1a\x18.proto.P2PUpdateResponse27\n" +
	"\aPhantom\x12,\n" +
	"\bTransmit\x12\r.proto.Packet\x1a\r.proto.Packet(\x010\x01B\x18Z\x16protocol_phantom/protob\x06proto3"

var (
	file_phantom_proto_rawDescOnce sync.Once
	file_phantom_proto_rawDescData []byte
)

func file_phantom_proto_rawDescGZIP() []byte {
	file_phantom_proto_rawDescOnce.Do(func() {
		file_phantom_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_phantom_proto_rawDesc), len(file_phantom_proto_rawDesc)))
	})
	return file_phantom_proto_rawDescData
}

var file_phantom_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_phantom_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_phantom_proto_goTypes = []any{
	(SystemNotification_Type)(0), // 0: proto.SystemNotification.Type
	(*Packet)(nil),               // 1: proto.Packet
	(*RegistrationRequest)(nil),  // 2: proto.RegistrationRequest
	(*HybridPreKeyBundle)(nil),   // 3: proto.HybridPreKeyBundle
	(*KeyRequest)(nil),           // 4: proto.KeyRequest
	(*KeyResponse)(nil),          // 5: proto.KeyResponse
	(*P2PInfo)(nil),              // 6: proto.P2PInfo
	(*P2PUpdate)(nil),            // 7: proto.P2PUpdate
	(*SystemNotification)(nil),   // 8: proto.SystemNotification
	(*EncryptedMessage)(nil),     // 9: proto.EncryptedMessage
	(*PublicSaltRequest)(nil),    // 10: proto.PublicSaltRequest
	(*PublicSaltResponse)(nil),   // 11: proto.PublicSaltResponse
	(*FinalHashRequest)(nil),     // 12: proto.FinalHashRequest
	(*FinalHashResponse)(nil),    // 13: proto.FinalHashResponse
	(*P2PInfoRequest)(nil),       // 14: proto.P2PInfoRequest
	(*P2PInfoResponse)(nil),      // 15: proto.P2PInfoResponse
	(*P2PUpdateRequest)(nil),     // 16: proto.P2PUpdateRequest
	(*P2PUpdateResponse)(nil),    // 17: proto.P2PUpdateResponse
	nil,                          // 18: proto.HybridPreKeyBundle.OneTimePrekeysKyberEntry
	nil,                          // 19: proto.HybridPreKeyBundle.OneTimePrekeysX25519Entry
}
var file_phantom_proto_depIdxs = []int32{
	2,  // 0: proto.Packet.registration_request:type_name -> proto.RegistrationRequest
	9,  // 1: proto.Packet.encrypted_message:type_name -> proto.EncryptedMessage
	4,  // 2: proto.Packet.key_request:type_name -> proto.KeyRequest
	5,  // 3: proto.Packet.key_response:type_name -> proto.KeyResponse
	8,  // 4: proto.Packet.system_notification:type_name -> proto.SystemNotification
	7,  // 5: proto.Packet.p2p_update:type_name -> proto.P2PUpdate
	6,  // 6: proto.RegistrationRequest.p2p_info:type_name -> proto.P2PInfo
	18, // 7: proto.HybridPreKeyBundle.one_time_prekeys_kyber:type_name -> proto.HybridPreKeyBundle.OneTimePrekeysKyberEntry
	19, // 8: proto.HybridPreKeyBundle.one_time_prekeys_x25519:type_name -> proto.HybridPreKeyBundle.OneTimePrekeysX25519Entry
	0,  // 9: proto.SystemNotification.type:type_name -> proto.SystemNotification.Type
	6,  // 10: proto.SystemNotification.p2p_info:type_name -> proto.P2PInfo
	10, // 11: proto.Auth.GetPublicSalt:input_type -> proto.PublicSaltRequest
	12, // 12: proto.Auth.GetFinalHash:input_type -> proto.FinalHashRequest
	14, // 13: proto.Auth.GetP2PInfo:input_type -> proto.P2PInfoRequest
	16, // 14: proto.Auth.UpdateP2PInfo:input_type -> proto.P2PUpdateRequest
	1,  // 15: proto.Phantom.Transmit:input_type -> proto.Packet
	11, // 16: proto.Auth.GetPublicSalt:output_type -> proto.PublicSaltResponse
	13, // 17: proto.Auth.GetFinalHash:output_type -> proto.FinalHashResponse
	15, // 18: proto.Auth.GetP2PInfo:output_type -> proto.P2PInfoResponse
	17, // 19: proto.Auth.UpdateP2PInfo:output_type -> proto.P2PUpdateResponse
	1,  // 20: proto.Phantom.Transmit:output_type -> proto.Packet
	16, // [16:21] is the sub-list for method output_type
	11, // [11:16] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_phantom_proto_init() }
func file_phantom_proto_init() {
	if File_phantom_proto != nil {
		return
	}
	file_phantom_proto_msgTypes[0].OneofWrappers = []any{
		(*Packet_RegistrationRequest)(nil),
		(*Packet_EncryptedMessage)(nil),
		(*Packet_KeyRequest)(nil),
		(*Packet_KeyResponse)(nil),
		(*Packet_SystemNotification)(nil),
		(*Packet_P2PUpdate)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_phantom_proto_rawDesc), len(file_phantom_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_phantom_proto_goTypes,
		DependencyIndexes: file_phantom_proto_depIdxs,
		EnumInfos:         file_phantom_proto_enumTypes,
		MessageInfos:      file_phantom_proto_msgTypes,
	}.Build()
	File_phantom_proto = out.File
	file_phantom_proto_goTypes = nil
	file_phantom_proto_depIdxs = nil
}
