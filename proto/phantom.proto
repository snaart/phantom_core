// Copyright 2025 snaart
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package proto;

option go_package = "protocol_phantom/proto";

// Контейнер верхнего уровня для всех типов сообщений
message Packet {
  string source_client_id_hash = 1;
  string destination_client_id_hash = 2;
  bytes signature = 3; // Подпись Dilithium5

  oneof payload {
    RegistrationRequest registration_request = 4;
    EncryptedMessage encrypted_message = 7;
    KeyRequest key_request = 8;
    KeyResponse key_response = 9;
    SystemNotification system_notification = 10;
    P2PUpdate p2p_update = 11; // Новое: обновление P2P информации
  }
}

message RegistrationRequest {
  bytes hybrid_prekey_bundle = 1;
  P2PInfo p2p_info = 2; // Новое: P2P информация при регистрации
}

message HybridPreKeyBundle {
  // --- PQC Ключи ---
  bytes identity_key_dilithium = 1;
  bytes identity_key_kyber = 2;
  bytes signed_prekey_kyber = 3;
  map<uint32, bytes> one_time_prekeys_kyber = 5;

  // --- Классические Ключи (X25519) ---
  bytes identity_key_x25519 = 6;
  bytes signed_prekey_x25519 = 7;
  map<uint32, bytes> one_time_prekeys_x25519 = 8;

  // --- Подпись (Dilithium) теперь покрывает ОБА signed prekey (Kyber + X25519) ---
  bytes prekey_signature_dilithium = 4;
}

message KeyRequest {
  string requested_client_id_hash = 1;
}

message KeyResponse {
  bytes hybrid_prekey_bundle = 1;
  string client_id_hash = 2;
  bytes one_time_prekey_kyber = 3;
  bytes one_time_prekey_x25519 = 6;
  uint32 one_time_prekey_id = 4;
  bytes server_signature = 5;
}

// P2P информация о клиенте
message P2PInfo {
  string peer_id = 1;        // libp2p peer ID
  repeated string addresses = 2; // multiaddr список
  bool prefer_p2p = 3;       // Предпочитает P2P
  bool relay_willing = 4;    // Готов быть relay
}

// Обновление P2P информации
message P2PUpdate {
  repeated string addresses = 1; // Обновленные адреса
  bool relay_willing = 2;     // Статус relay
}

message SystemNotification {
  enum Type {
    UNKNOWN = 0;
    OPK_LOW = 1;
    REGISTRATION_FAILED_USERNAME_TAKEN = 2;
    USERNAME_REVEAL = 3;
    P2P_AVAILABLE = 4;     // Новое: пир доступен через P2P
    P2P_PEER_INFO = 5;     // Новое: информация о P2P пире
  }
  Type type = 1;
  string message = 2;
  P2PInfo p2p_info = 3;     // Новое: P2P информация в уведомлении
}

message EncryptedMessage {
  bytes ratchet_header = 1;
  bytes ciphertext = 2;
  int64 timestamp = 3;
}

// RPC для получения публичной соли
message PublicSaltRequest {}

message PublicSaltResponse {
  bytes public_salt = 1;
}

// RPC для получения финального хэша
message FinalHashRequest {
  bytes local_hash = 1;
}

message FinalHashResponse {
  string final_hash = 1;
}

// Новые сообщения для P2P поддержки
message P2PInfoRequest {
  string client_id_hash = 1;
}

message P2PInfoResponse {
  bool available = 1;
  string peer_id = 2;
  repeated string addresses = 3;
  bool prefer_p2p = 4;
}

message P2PUpdateRequest {
  string client_id_hash = 1;
  string peer_id = 2;
  repeated string addresses = 3;
  bool prefer_p2p = 4;
  bool relay_willing = 5;
}

message P2PUpdateResponse {
  bool success = 1;
}

service Auth {
  rpc GetPublicSalt(PublicSaltRequest) returns (PublicSaltResponse);
  rpc GetFinalHash(FinalHashRequest) returns (FinalHashResponse);

  // Новые методы для P2P
  rpc GetP2PInfo(P2PInfoRequest) returns (P2PInfoResponse);
  rpc UpdateP2PInfo(P2PUpdateRequest) returns (P2PUpdateResponse);
}

service Phantom {
  rpc Transmit(stream Packet) returns (stream Packet);
}