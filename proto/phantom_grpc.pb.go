// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: phantom.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Auth_GetPublicSalt_FullMethodName = "/proto.Auth/GetPublicSalt"
	Auth_GetFinalHash_FullMethodName  = "/proto.Auth/GetFinalHash"
	Auth_GetP2PInfo_FullMethodName    = "/proto.Auth/GetP2PInfo"
	Auth_UpdateP2PInfo_FullMethodName = "/proto.Auth/UpdateP2PInfo"
)

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	GetPublicSalt(ctx context.Context, in *PublicSaltRequest, opts ...grpc.CallOption) (*PublicSaltResponse, error)
	GetFinalHash(ctx context.Context, in *FinalHashRequest, opts ...grpc.CallOption) (*FinalHashResponse, error)
	// Новые методы для P2P
	GetP2PInfo(ctx context.Context, in *P2PInfoRequest, opts ...grpc.CallOption) (*P2PInfoResponse, error)
	UpdateP2PInfo(ctx context.Context, in *P2PUpdateRequest, opts ...grpc.CallOption) (*P2PUpdateResponse, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) GetPublicSalt(ctx context.Context, in *PublicSaltRequest, opts ...grpc.CallOption) (*PublicSaltResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublicSaltResponse)
	err := c.cc.Invoke(ctx, Auth_GetPublicSalt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetFinalHash(ctx context.Context, in *FinalHashRequest, opts ...grpc.CallOption) (*FinalHashResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FinalHashResponse)
	err := c.cc.Invoke(ctx, Auth_GetFinalHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetP2PInfo(ctx context.Context, in *P2PInfoRequest, opts ...grpc.CallOption) (*P2PInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(P2PInfoResponse)
	err := c.cc.Invoke(ctx, Auth_GetP2PInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) UpdateP2PInfo(ctx context.Context, in *P2PUpdateRequest, opts ...grpc.CallOption) (*P2PUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(P2PUpdateResponse)
	err := c.cc.Invoke(ctx, Auth_UpdateP2PInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility.
type AuthServer interface {
	GetPublicSalt(context.Context, *PublicSaltRequest) (*PublicSaltResponse, error)
	GetFinalHash(context.Context, *FinalHashRequest) (*FinalHashResponse, error)
	// Новые методы для P2P
	GetP2PInfo(context.Context, *P2PInfoRequest) (*P2PInfoResponse, error)
	UpdateP2PInfo(context.Context, *P2PUpdateRequest) (*P2PUpdateResponse, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServer struct{}

func (UnimplementedAuthServer) GetPublicSalt(context.Context, *PublicSaltRequest) (*PublicSaltResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicSalt not implemented")
}
func (UnimplementedAuthServer) GetFinalHash(context.Context, *FinalHashRequest) (*FinalHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinalHash not implemented")
}
func (UnimplementedAuthServer) GetP2PInfo(context.Context, *P2PInfoRequest) (*P2PInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetP2PInfo not implemented")
}
func (UnimplementedAuthServer) UpdateP2PInfo(context.Context, *P2PUpdateRequest) (*P2PUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateP2PInfo not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}
func (UnimplementedAuthServer) testEmbeddedByValue()              {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	// If the following call pancis, it indicates UnimplementedAuthServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_GetPublicSalt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicSaltRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetPublicSalt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_GetPublicSalt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetPublicSalt(ctx, req.(*PublicSaltRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetFinalHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetFinalHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_GetFinalHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetFinalHash(ctx, req.(*FinalHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetP2PInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetP2PInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_GetP2PInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetP2PInfo(ctx, req.(*P2PInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_UpdateP2PInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).UpdateP2PInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_UpdateP2PInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).UpdateP2PInfo(ctx, req.(*P2PUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPublicSalt",
			Handler:    _Auth_GetPublicSalt_Handler,
		},
		{
			MethodName: "GetFinalHash",
			Handler:    _Auth_GetFinalHash_Handler,
		},
		{
			MethodName: "GetP2PInfo",
			Handler:    _Auth_GetP2PInfo_Handler,
		},
		{
			MethodName: "UpdateP2PInfo",
			Handler:    _Auth_UpdateP2PInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "phantom.proto",
}

const (
	Phantom_Transmit_FullMethodName = "/proto.Phantom/Transmit"
)

// PhantomClient is the client API for Phantom service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PhantomClient interface {
	Transmit(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Packet, Packet], error)
}

type phantomClient struct {
	cc grpc.ClientConnInterface
}

func NewPhantomClient(cc grpc.ClientConnInterface) PhantomClient {
	return &phantomClient{cc}
}

func (c *phantomClient) Transmit(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Packet, Packet], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Phantom_ServiceDesc.Streams[0], Phantom_Transmit_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Packet, Packet]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Phantom_TransmitClient = grpc.BidiStreamingClient[Packet, Packet]

// PhantomServer is the server API for Phantom service.
// All implementations must embed UnimplementedPhantomServer
// for forward compatibility.
type PhantomServer interface {
	Transmit(grpc.BidiStreamingServer[Packet, Packet]) error
	mustEmbedUnimplementedPhantomServer()
}

// UnimplementedPhantomServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPhantomServer struct{}

func (UnimplementedPhantomServer) Transmit(grpc.BidiStreamingServer[Packet, Packet]) error {
	return status.Errorf(codes.Unimplemented, "method Transmit not implemented")
}
func (UnimplementedPhantomServer) mustEmbedUnimplementedPhantomServer() {}
func (UnimplementedPhantomServer) testEmbeddedByValue()                 {}

// UnsafePhantomServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PhantomServer will
// result in compilation errors.
type UnsafePhantomServer interface {
	mustEmbedUnimplementedPhantomServer()
}

func RegisterPhantomServer(s grpc.ServiceRegistrar, srv PhantomServer) {
	// If the following call pancis, it indicates UnimplementedPhantomServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Phantom_ServiceDesc, srv)
}

func _Phantom_Transmit_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PhantomServer).Transmit(&grpc.GenericServerStream[Packet, Packet]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Phantom_TransmitServer = grpc.BidiStreamingServer[Packet, Packet]

// Phantom_ServiceDesc is the grpc.ServiceDesc for Phantom service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Phantom_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Phantom",
	HandlerType: (*PhantomServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Transmit",
			Handler:       _Phantom_Transmit_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "phantom.proto",
}
